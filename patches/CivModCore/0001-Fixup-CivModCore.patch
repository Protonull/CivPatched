From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Wed, 24 May 2023 19:53:23 +0100
Subject: [PATCH] Fixup CivModCore

Update canvas to 8b25285839.

Remove redundant ACivMod disable cleanups.

Fix ACivMod::disable.

diff --git a/build.gradle.kts b/build.gradle.kts
index 59aa4b7b2ea86655902bd5b5e140e77003b8e65a..5d4fdb0ca86c756b99a1ecc3dc96709337caf0da 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,23 +1,16 @@
-import net.civmc.civgradle.CivGradleExtension
+group = "civ.genre.civmodcore"
+version = "2.3.5"
+description = "CivModCore"
 
-plugins {
-	id("net.civmc.civgradle") version "2.+" apply false
+configure<net.civmc.civgradle.CivGradleExtension> {
+	pluginName = project.property("description") as String
 }
 
-subprojects {
-	apply(plugin = "java-library")
-	apply(plugin = "maven-publish")
-	apply(plugin = "net.civmc.civgradle")
-
-	configure<CivGradleExtension> {
-		pluginName = project.property("pluginName") as String
-	}
-
-	repositories {
-		mavenCentral()
-        maven("https://repo.aikar.co/content/groups/aikar/")
-        maven("https://libraries.minecraft.net")
-
-		maven("https://jitpack.io")
-	}
+dependencies {
+	api("com.zaxxer:HikariCP:5.0.1")
+	api("co.aikar:acf-bukkit:0.5.0-SNAPSHOT")
+	api("co.aikar:taskchain-bukkit:3.7.2")
+	api("com.github.IPVP-MC:canvas:8b25285839")
+	api("org.apache.commons:commons-collections4:4.4")
+	api("com.google.code.findbugs:jsr305:3.0.2")
 }
diff --git a/src/main/java/org/ipvp/canvas/type/AbstractCivMenu.java b/src/main/java/org/ipvp/canvas/type/AbstractCivMenu.java
index df544310700fe00df8889b3179edf9dd3fb86c93..064ffa45f5607f4716fc9ea26843baeb026c68dd 100644
--- a/src/main/java/org/ipvp/canvas/type/AbstractCivMenu.java
+++ b/src/main/java/org/ipvp/canvas/type/AbstractCivMenu.java
@@ -29,7 +29,7 @@ public abstract class AbstractCivMenu extends AbstractMenu {
 	private static final Method UPDATE_INV_CONTENTS_METHOD;
 
 	static {
-		VIEWERS_FIELD = FieldUtils.getDeclaredField(AbstractMenu.class, "viewers", true);
+		VIEWERS_FIELD = FieldUtils.getDeclaredField(AbstractMenu.class, "holders", true); // CivPatched: The field was renamed to "holders"
 		SLOTS_FIELD = FieldUtils.getDeclaredField(AbstractMenu.class, "slots", true);
 		UPDATE_INV_CONTENTS_METHOD = MethodUtils.getMatchingMethod(AbstractMenu.class,
 				"updateInventoryContents", Player.class, Inventory.class);
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java b/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
index d793b180b06c9073ce595b229b53ad69c6b2adef..0cf5ed14fff426640a8b0f0e94c078bc5c5f645f 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
@@ -15,7 +15,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.EventHandler;
-import org.bukkit.event.HandlerList;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.PluginDisableEvent;
 import org.bukkit.plugin.Plugin;
@@ -43,10 +42,6 @@ public abstract class ACivMod extends JavaPlugin {
 	
 	@Override
 	public void onDisable() {
-		HandlerList.unregisterAll(this);
-		Bukkit.getMessenger().unregisterIncomingPluginChannel(this);
-		Bukkit.getMessenger().unregisterOutgoingPluginChannel(this);
-		Bukkit.getScheduler().cancelTasks(this);
 		this.configClasses.forEach(ConfigurationSerialization::unregisterClass);
 	}
 
@@ -134,7 +129,7 @@ public abstract class ACivMod extends JavaPlugin {
 	 * Disables this plugin.
 	 */
 	public void disable() {
-		getPluginLoader().disablePlugin(this);
+		getServer().getPluginManager().disablePlugin(this); // CivPatched: Do full disable
 	}
 
 	/**
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java b/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
index b42c2547061518f92bafe8438fab105213510095..146c7b181acdc67f5eb375644db485af384a5e0a 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
@@ -10,13 +10,11 @@ import vg.civcraft.mc.civmodcore.commands.CommandManager;
 import vg.civcraft.mc.civmodcore.commands.StatCommand;
 import vg.civcraft.mc.civmodcore.dao.DatabaseCredentials;
 import vg.civcraft.mc.civmodcore.dao.ManagedDatasource;
-import vg.civcraft.mc.civmodcore.events.CustomEventMapper;
 import vg.civcraft.mc.civmodcore.inventory.gui.ClickableInventoryListener;
 import vg.civcraft.mc.civmodcore.inventory.items.EnchantUtils;
 import vg.civcraft.mc.civmodcore.inventory.items.MoreTags;
 import vg.civcraft.mc.civmodcore.inventory.items.SpawnEggUtils;
 import vg.civcraft.mc.civmodcore.inventory.items.TreeTypeUtils;
-import vg.civcraft.mc.civmodcore.maps.MapColours;
 import vg.civcraft.mc.civmodcore.players.scoreboard.bottom.BottomLineAPI;
 import vg.civcraft.mc.civmodcore.players.scoreboard.side.ScoreBoardAPI;
 import vg.civcraft.mc.civmodcore.players.scoreboard.side.ScoreBoardListener;
@@ -29,7 +27,6 @@ import vg.civcraft.mc.civmodcore.world.locations.chunkmeta.api.ChunkMetaAPI;
 import vg.civcraft.mc.civmodcore.world.locations.chunkmeta.stat.LoadStatisticManager;
 import vg.civcraft.mc.civmodcore.world.locations.global.CMCWorldDAO;
 import vg.civcraft.mc.civmodcore.world.locations.global.WorldIDManager;
-import vg.civcraft.mc.civmodcore.world.operations.ChunkOperationManager;
 
 public final class CivModCorePlugin extends ACivMod {
 
@@ -77,14 +74,11 @@ public final class CivModCorePlugin extends ACivMod {
 		registerListener(new ClickableInventoryListener());
 		registerListener(DialogManager.INSTANCE);
 		registerListener(new ScoreBoardListener());
-		registerListener(new CustomEventMapper());
 		registerListener(new WorldTracker());
-		registerListener(ChunkOperationManager.INSTANCE);
 		// Register commands
 		this.commands = new CommandManager(this);
 		this.commands.init();
 		this.commands.registerCommand(new ConfigCommand());
-		this.commands.registerCommand(ChunkOperationManager.INSTANCE);
 		this.commands.registerCommand(new StatCommand());
 		// Load APIs
 		EnchantUtils.loadEnchantAbbreviations(this);
@@ -92,7 +86,6 @@ public final class CivModCorePlugin extends ACivMod {
 		SpawnEggUtils.init();
 		TreeTypeUtils.init();
 		BottomLineAPI.init();
-		MapColours.init();
 		this.skinCache = new SkinCache(this, this.config.getSkinCacheThreads());
 
 		if (this.config.getChunkLoadingStatistics())
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
index 082191b08165e894c97c23efff15d7192cb185f5..dbf5d5e1be70d67748f0562395767d9c163b094a 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
@@ -15,7 +15,6 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import vg.civcraft.mc.civmodcore.CivModCorePlugin;
 import vg.civcraft.mc.civmodcore.players.settings.gui.MenuOption;
 import vg.civcraft.mc.civmodcore.players.settings.gui.MenuSection;
-import vg.civcraft.mc.civmodcore.players.settings.impl.AltConsistentSetting;
 
 /**
  * Allows creating settings, which will automatically be available in players
@@ -85,13 +84,6 @@ public final class PlayerSettingAPI {
 	 */
 	public static void registerSetting(PlayerSetting<?> setting, MenuSection menu) {
 		Preconditions.checkArgument(setting != null, "Player setting cannot be null.");
-		if (setting instanceof AltConsistentSetting) {
-			if (setting.canBeChangedByPlayer()) {
-				menu.addItem(new MenuOption(menu, setting));
-			}
-			menu = null;
-			setting = ((AltConsistentSetting<?,?>) setting).getWrappedSetting();
-		}
 		loadValues(setting);
 		List<PlayerSetting<?>> pluginSettings = SETTINGS_BY_PLUGIN.computeIfAbsent(
 				setting.getOwningPlugin().getName(),
