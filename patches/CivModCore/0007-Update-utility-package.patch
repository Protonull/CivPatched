From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Sat, 3 Jun 2023 06:54:38 +0100
Subject: [PATCH] Update utility package

Add ISerializer.

Add DeprecationUtils to help better track usages of deprecated functions.

Add JavaHelpers, some utilities that really rather be part of Java itself.

Add MoreEnumUtils.

Add MoreIterationUtils.

Add computeAll to MoreMapUtils.

Add inject to CivLogger, which allows you to create a Logger and modify the logged messages in some way.

diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/CivLogger.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/CivLogger.java
index 335f7b2d5f528999872a2ac55fc19ffc780de202..b1ff9da40ea3b317ab9468ad52c1650121646599 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/utilities/CivLogger.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/CivLogger.java
@@ -14,6 +14,23 @@ import org.bukkit.plugin.java.PluginClassLoader;
 
 public final class CivLogger extends Logger {
 
+	// CivPatched Start
+	public static @Nonnull Logger inject(
+			final @Nonnull Logger logger,
+			final @Nonnull java.util.function.Consumer<LogRecord> handler
+	) {
+		final var wrapper = new Logger(null, null) {
+			@Override
+			public void log(final LogRecord record) {
+				handler.accept(record);
+				super.log(record);
+			}
+		};
+		wrapper.setParent(logger);
+		return wrapper;
+	}
+	// CivPatched End
+
 	private final String prefix;
 
 	private CivLogger(@Nonnull final Logger logger, @Nonnull final String prefix) {
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/DeprecationUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/DeprecationUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a4b6f1bdf0691b0abab5900bd74000e2d7510f1
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/DeprecationUtils.java
@@ -0,0 +1,39 @@
+package vg.civcraft.mc.civmodcore.utilities;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import lombok.experimental.StandardException;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * @author CivPatched
+ */
+@UtilityClass
+public class DeprecationUtils {
+
+    private final Logger LOGGER = Bukkit.getLogger();
+
+    /**
+     * Prints a warning to Bukkit's console with a stacktrace warning of
+     * deprecation usages.
+     */
+    public void printDeprecationWarning() {
+        printDeprecationWarning("You are using a deprecated feature. Please consider updating to its recommended replacement.");
+    }
+
+    /**
+     * Prints your warning message to Bukkit's console with a stacktrace
+     * warning of deprecation usages.
+     */
+    public void printDeprecationWarning(final @NotNull String message) {
+        LOGGER.log(Level.WARNING, message, new DeprecationException());
+    }
+
+    @StandardException
+    public static class DeprecationException extends RuntimeException {
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/JavaHelpers.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/JavaHelpers.java
new file mode 100644
index 0000000000000000000000000000000000000000..0efd7387edd4e60705e719f37ac0fc86671e0dcd
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/JavaHelpers.java
@@ -0,0 +1,23 @@
+package vg.civcraft.mc.civmodcore.utilities;
+
+import java.util.function.Supplier;
+import lombok.experimental.UtilityClass;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * @author CivPatched
+ */
+@UtilityClass
+public class JavaHelpers {
+
+    /**
+     * Convenience function to yield a value from multiple lines, inline.
+     * Keep an eye on: https://openjdk.org/jeps/447
+     */
+    public static <T> T yield(
+            final @NotNull Supplier<T> supplier
+    ) {
+        return supplier.get();
+    }
+
+}
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..692b5df27f083c7da6ead64fca1b2b9c578b64af
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java
@@ -0,0 +1,82 @@
+package vg.civcraft.mc.civmodcore.utilities;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import lombok.experimental.UtilityClass;
+import org.apache.commons.lang3.EnumUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Utility class that fills in the gaps of {@link EnumUtils}.
+ *
+ * @author CivPatched
+ */
+@UtilityClass
+public class MoreEnumUtils {
+
+    /**
+     * @param <E> The enum type itself.
+     * @param value The enum value to stringify.
+     * @return Returns a string-version of the given enum, or "null".
+     */
+    public <E extends Enum<E>> @NotNull String getName(final E value) {
+        return value == null ? "null" : value.name();
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enumClass The enum class to get the names of.
+     * @return Returns a set of all enum-names of the given enum-class.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final @NotNull Class<E> enumClass) {
+        return Stream.of(enumClass.getEnumConstants())
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to convert into names.
+     * @return Returns a set of all enum-names of the given enums.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final E @NotNull [] enums) {
+        return Arrays.stream(enums)
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to convert into names.
+     * @return Returns a set of all enum-names of the given enums.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final @NotNull Collection<E> enums) {
+        return enums
+                .stream()
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to join together into a string.
+     * @return Returns a string representing the given enums. Can be empty.
+     */
+    public <E extends Enum<E>> @NotNull String join(final E @NotNull [] enums) {
+        return StringUtils.join(getNames(enums), ",");
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to join together into a string.
+     * @return Returns a string representing the given enums. Can be empty.
+     */
+    public <E extends Enum<E>> @NotNull String join(final @NotNull Collection<E> enums) {
+        return StringUtils.join(getNames(enums), ",");
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreIterationUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreIterationUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab3c8a544ef4c03513809b4d69933f531774bb4f
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreIterationUtils.java
@@ -0,0 +1,68 @@
+package vg.civcraft.mc.civmodcore.utilities;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.function.Predicate;
+import lombok.experimental.UtilityClass;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * @author CivPatched
+ */
+@UtilityClass
+public class MoreIterationUtils {
+
+    /**
+     * @param <T> The iterator's element type.
+     * @param iterator The iterator to remove elements from.
+     * @param predicate The method to test entries with. It should return true to remove that entry.
+     */
+    public <T> void removeIf(
+            final @NotNull Iterator<T> iterator,
+            final @NotNull Predicate<T> predicate
+    ) {
+        while (iterator.hasNext()) {
+            if (predicate.test(iterator.next())) {
+                iterator.remove();
+            }
+        }
+    }
+
+    /**
+     * @param <T> The iterable's element type.
+     * @param iterable The iterable to remove elements from.
+     * @param predicate The method to test entries with. It should return true to remove that entry.
+     */
+    public <T> void removeIf(
+            final @NotNull Iterable<T> iterable,
+            final @NotNull Predicate<T> predicate
+    ) {
+        removeIf(iterable.iterator(), predicate);
+    }
+
+    /**
+     * This is useful when wanting to separate elements into groups based on
+     * shared data. For example, this could be used to group a collection of
+     * locations by their world. Each unique world would be a kay, and the
+     * value would be a list of all the locations with that world.
+     */
+    public <E, K> Map<K, List<E>> groupIntoMapByKey(
+            final @NotNull Collection<E> collection,
+            final @NotNull Function<E, K> discriminator
+    ) {
+        final var map = new HashMap<K, List<E>>();
+        for (final var element : collection) {
+            map.computeIfAbsent(
+                    discriminator.apply(element),
+                    (key) -> new ArrayList<>()
+            ).add(element);
+        }
+        return map;
+    }
+
+}
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreMapUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreMapUtils.java
index 7d3cf8949491b914933ce445e4e545d8fe22871e..b4162aea8d8920d417a1b020153bc9bd200e6a1b 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreMapUtils.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreMapUtils.java
@@ -9,6 +9,11 @@ import lombok.experimental.UtilityClass;
 import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.ArrayUtils;
 
+// CivPatched Start
+import java.util.function.BiFunction;
+import org.jetbrains.annotations.NotNull;
+// CivPatched End
+
 /**
  * Utility class that fills in the gaps of {@link MapUtils}.
  *
@@ -139,6 +144,29 @@ public final class MoreMapUtils {
 		}
 	}
 
+	// CivPatched Start
+	/**
+	 * Computes every key-value paid in the map.
+	 */
+	public <K, V> void computeAll(
+			final @NotNull Map<K, V> map,
+			final @NotNull BiFunction<K, V, V> computer
+	) {
+		for (final var iterator = map.entrySet().iterator(); iterator.hasNext();) {
+			final var entry = iterator.next();
+			final var computedValue = computer.apply(
+					entry.getKey(),
+					entry.getValue()
+			);
+			if (computedValue == null) {
+				iterator.remove();
+				continue;
+			}
+			entry.setValue(computedValue);
+		}
+	}
+	// CivPatched End
+
 	/**
 	 * @param <T> The type of the map's values.
 	 * @return Returns a new TreeMap with a String keys that are <b>NOT</b> case sensitive.
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/serialization/ISerializer.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/serialization/ISerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..afe2d7bf61e54f001024d9575efd283fb36d6d45
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/serialization/ISerializer.java
@@ -0,0 +1,141 @@
+package vg.civcraft.mc.civmodcore.utilities.serialization;
+
+import java.util.Objects;
+import lombok.Synchronized;
+import net.minecraft.nbt.CompoundTag;
+import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.nbt.NBTDeserializer;
+import vg.civcraft.mc.civmodcore.nbt.NBTSerializable;
+import vg.civcraft.mc.civmodcore.nbt.NBTSerialization;
+import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
+
+/**
+ * This is a class inspired by {@link NBTSerializable} and {@link PersistentDataType} and is designed to act as a bridge
+ * between them while not being specific to either.
+ *
+ * @author CivPatched
+ */
+public interface ISerializer<T, R> {
+
+    @NotNull R serialize(@NotNull T instance);
+
+    @NotNull T deserialize(@NotNull R raw);
+
+    /**
+     * Template interface for byte serialization.
+     *
+     * @param <C> The type that can be serialised to and from byte data.
+     */
+    interface Bytes<C> extends ISerializer<C, byte[]> {
+
+    }
+
+    /**
+     * Template interface for NBT serialization.
+     *
+     * @param <C> The type that can be serialised to and from NBT.
+     */
+    interface NBT<C> extends ISerializer<C, CompoundTag> {
+
+    }
+
+    /**
+     * Template that wraps legacy NBT serialization methods.
+     *
+     * @param <C> The type that can be serialised to and from NBT.
+     */
+    class LegacyNBT<C extends NBTSerializable> implements ISerializer<C, NBTCompound> {
+        private final NBTDeserializer<C> deserializer;
+
+        /**
+         * @param deserializer The serializable's version of {@link NBTSerializable#fromNBT(NBTCompound) fromNBT(NBTCompound)}
+         */
+        public LegacyNBT(final @NotNull NBTDeserializer<C> deserializer) {
+            this.deserializer = Objects.requireNonNull(deserializer);
+        }
+
+        /**
+         * @param serializableClass The serializable's class to extract the deserializer from.
+         */
+        public LegacyNBT(final @NotNull Class<C> serializableClass) {
+            this(NBTSerialization.getDeserializer(serializableClass));
+        }
+
+        @Override
+        public @NotNull NBTCompound serialize(final @NotNull C instance) {
+            final var nbt = new NBTCompound();
+            instance.toNBT(nbt);
+            return nbt;
+        }
+
+        @Override
+        public @NotNull C deserialize(final @NotNull NBTCompound raw) {
+            return this.deserializer.fromNBT(raw);
+        }
+    }
+
+    /**
+     * Template that wraps PersistentDataContainer serialization.
+     *
+     * @param <C> The <b>C</b>omplex type.
+     * @param <P> The <b>P</b>rimitive type.
+     */
+    abstract class PDC<C, P> implements ISerializer<C, P>, PersistentDataType<P, C> {
+        private final Object $lock;
+        private final Class<C> complexClass;
+        private final Class<P> primitiveClass;
+        private PersistentDataAdapterContext adapter;
+
+        public PDC(
+                final @NotNull Class<C> complexClass,
+                final @NotNull Class<P> primitiveClass
+        ) {
+            this.$lock = new Object[0];
+            this.complexClass = Objects.requireNonNull(complexClass);
+            this.primitiveClass = Objects.requireNonNull(primitiveClass);
+        }
+
+        protected final @NotNull PersistentDataAdapterContext getAdapter() {
+            return this.adapter;
+        }
+
+        public final @NotNull Class<C> getComplexType() {
+            return this.complexClass;
+        }
+
+        public final @NotNull Class<P> getPrimitiveType() {
+            return this.primitiveClass;
+        }
+
+        @Deprecated
+        @Synchronized
+        public final @NotNull P toPrimitive(
+                final @NotNull C complex,
+                final @NotNull PersistentDataAdapterContext context
+        ) {
+            synchronized (this.$lock) {
+                this.adapter = context;
+                final P result = serialize(complex);
+                this.adapter = null;
+                return result;
+            }
+        }
+
+        @Deprecated
+        @Synchronized
+        public final @NotNull C fromPrimitive(
+                final @NotNull P primitive,
+                final @NotNull PersistentDataAdapterContext context
+        ) {
+            synchronized (this.$lock) {
+                this.adapter = context;
+                final C result = deserialize(primitive);
+                this.adapter = null;
+                return result;
+            }
+        }
+    }
+
+}
