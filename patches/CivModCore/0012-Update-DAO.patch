From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Fri, 7 Jul 2023 02:08:05 +0100
Subject: [PATCH] Update DAO

Entirely overhaul database migrations.

Allow ManagedDatasource to be constructed with a HikariConfig.

Add DefaultDatasource, which allows other plugins to use CivModCore's database.

Update MoreMapUtils.attemptGet.

diff --git a/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java b/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
index ad2218b9b629766fae137d9563a0c650d098c6ae..ca968415eab3bd47c51277944663e88bccb829f2 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/CivModCorePlugin.java
@@ -27,6 +27,10 @@ import vg.civcraft.mc.civmodcore.world.locations.chunkmeta.stat.LoadStatisticMan
 import vg.civcraft.mc.civmodcore.world.locations.global.CMCWorldDAO;
 import vg.civcraft.mc.civmodcore.world.locations.global.WorldIDManager;
 
+// CivPatched Start
+import vg.civcraft.mc.civmodcore.dao.DefaultDatasource;
+// CivPatched End
+
 public final class CivModCorePlugin extends ACivMod {
 
 	private static CivModCorePlugin instance;
@@ -42,6 +46,7 @@ public final class CivModCorePlugin extends ACivMod {
 	public void onEnable() {
 		instance = this;
 		registerConfigClass(DatabaseCredentials.class);
+		registerConfigClass(DefaultDatasource.class); // CivPatched
 		// Save default resources
 		saveDefaultResource("enchants.yml");
 		super.onEnable();
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/config/ConfigHelper.java b/src/main/java/vg/civcraft/mc/civmodcore/config/ConfigHelper.java
index 57c94185a6a42b507c442cc839ee278fb3aa33b8..8cb623a227da3887b3c5271686375256ffe1e78b 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/config/ConfigHelper.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/config/ConfigHelper.java
@@ -41,8 +41,13 @@ import vg.civcraft.mc.civmodcore.world.model.RectangleArea;
 import java.util.HashMap;
 import org.apache.commons.lang3.EnumUtils;
 import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.ACivMod;
+import vg.civcraft.mc.civmodcore.dao.DatabaseCredentials;
+import vg.civcraft.mc.civmodcore.dao.DefaultDatasource;
+import vg.civcraft.mc.civmodcore.dao.ManagedDatasource;
 import vg.civcraft.mc.civmodcore.inventory.items.ItemUtils;
 import vg.civcraft.mc.civmodcore.inventory.items.MetaUtils;
+import vg.civcraft.mc.civmodcore.utilities.CivLogger;
 // CivPatched End
 
 @UtilityClass
@@ -50,6 +55,41 @@ public final class ConfigHelper {
 
 	private static final Logger LOGGER = Bukkit.getLogger();
 
+	// CivPatched Start
+	/**
+	 * Attempts to retrieve a ManagedDatasource (aka a database connection) from the config at a given key.
+	 *
+	 * @param config The configuration section to get the ManagedDatasource from.
+	 * @param key The key of the ManagedDatasource.
+	 * @param plugin The owning plugin of the ManagedDatasource.
+	 * @return Returns a new ManagedDatasource if found, null otherwise.
+	 */
+	public @Nullable ManagedDatasource getManagedDatasource(
+			final @NotNull ConfigurationSection config,
+			final @NotNull String key,
+			final @NotNull ACivMod plugin
+	) {
+		final Object value = config.get(key, null);
+		if (value instanceof final DatabaseCredentials credentials) {
+			return ManagedDatasource.construct(plugin, credentials);
+		}
+		if (value instanceof final DefaultDatasource connection) {
+			return connection.getManagedDatasource();
+		}
+		if (value instanceof final ConfigurationSection section) {
+			final var logger = CivLogger.getLogger(plugin.getClass(), ConfigHelper.class);
+			logger.warning("Deprecated database definition at [" + config.getCurrentPath() + "." + key + "]");
+			final DatabaseCredentials credentials = DatabaseCredentials.deserialize(section.getValues(false));
+			if (credentials == null) {
+				logger.warning("Deprecated database definition at [" + config.getCurrentPath() + "." + key + "] could not be deserialized into credentials!");
+				return null;
+			}
+			return ManagedDatasource.construct(plugin, credentials);
+		}
+		return null;
+	}
+	// CivPatched End
+
 	/**
 	 * Retrieves the configuration section at the given key on the given configuration section.
 	 *
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/dao/ConnectionPool.java b/src/main/java/vg/civcraft/mc/civmodcore/dao/ConnectionPool.java
index 6b9098ba8c0d71130fb3baf09b661205416642b0..c6d3708e5ec25705d6b5322ae86113d11208e505 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/dao/ConnectionPool.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/dao/ConnectionPool.java
@@ -1,17 +1,21 @@
 package vg.civcraft.mc.civmodcore.dao;
 
-import com.google.common.base.Strings;
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.Objects;
 import java.util.logging.Logger;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import org.bukkit.Bukkit;
 
+// CivPatched Start
+import java.util.logging.Level;
+import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.utilities.DeprecationUtils;
+// CivPatched End
+
 /**
  * Handy Connection Pool / Database wrapper for use by all plugins.
  *
@@ -20,8 +24,6 @@ import org.bukkit.Bukkit;
 public class ConnectionPool {
 
 	private static final Logger LOGGER = Bukkit.getLogger();
-
-	private final DatabaseCredentials credentials;
 	private HikariDataSource datasource;
 
 	/**
@@ -31,31 +33,23 @@ public class ConnectionPool {
 	 * @param credentials The credentials to connect with.
 	 */
 	public ConnectionPool(@Nonnull final DatabaseCredentials credentials) {
-		this.credentials = Objects.requireNonNull(credentials,
-				"Cannot create a ConnectionPool with a null set of credentials.");
-		HikariConfig config = new HikariConfig();
-		config.setJdbcUrl("jdbc:" + credentials.driver() + "://" + credentials.host() + ":" +
-				credentials.port() + "/" + credentials.database());
-		config.setConnectionTimeout(credentials.connectionTimeout());
-		config.setIdleTimeout(credentials.idleTimeout());
-		config.setMaxLifetime(credentials.maxLifetime());
-		config.setMaximumPoolSize(credentials.poolSize());
-		config.setUsername(credentials.username());
-		if (!Strings.isNullOrEmpty(credentials.password())) {
-			config.setPassword(credentials.password());
-		}
+		this(credentials.generateConfig()); // CivPatched
+	}
+
+	// CivPatched Start
+	public ConnectionPool(final @NotNull HikariConfig config) {
 		this.datasource = new HikariDataSource(config);
 		try (final Connection connection = getConnection();
 			 final Statement statement = connection.createStatement()) {
 			statement.executeQuery("SELECT 1;");
 			LOGGER.info("Successfully connected to the database.");
 		}
-		catch (SQLException exception) {
-			LOGGER.severe("Unable to connect to the database.");
-			exception.printStackTrace();
+		catch (final SQLException thrown) {
+			LOGGER.log(Level.SEVERE, "Unable to connect to the database.", thrown);
 			this.datasource = null;
 		}
 	}
+	// CivPatched End
 
 	/**
 	 * Creates a new ConnectionPool based on explicitly defined parameters. Note that these parameters are not
@@ -73,6 +67,7 @@ public class ConnectionPool {
 	 * @param idleTimeout The longest a connection can sit idle before recycling (10 minutes recommended, check dbms)
 	 * @param maxLifetime The longest a connection can exist in total. (2 hours recommended, check dbms)
 	 */
+	@Deprecated // CivPatched
 	public ConnectionPool(final String user,
 						  final String pass,
 						  final String host,
@@ -92,9 +87,10 @@ public class ConnectionPool {
 	 *
 	 * @return Returns the credentials being used.
 	 */
+	@Deprecated // CivPatched
 	@Nonnull
 	public DatabaseCredentials getCredentials() {
-		return this.credentials;
+		throw new DeprecationUtils.DeprecationException("ConnectionPool doesn't use DatabaseCredentials anymore!"); // CivPatched
 	}
 
 	/**
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseCredentials.java b/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseCredentials.java
index 85707ef2bfec4dc4f5f9398b578436f31ffc03a3..c19c241091f7b1590ea8564ce0823d4cf14a6215 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseCredentials.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseCredentials.java
@@ -1,6 +1,5 @@
 package vg.civcraft.mc.civmodcore.dao;
 
-import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -9,6 +8,13 @@ import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.util.NumberConversions;
 import vg.civcraft.mc.civmodcore.utilities.MoreMapUtils;
 
+// CivPatched Start
+import com.zaxxer.hikari.HikariConfig;
+import java.util.List;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+// CivPatched End
+
 /**
  * This is a data class representing a set of credentials used for connecting to databases.
  *
@@ -29,18 +35,20 @@ public record DatabaseCredentials(String username,
 	@Nonnull
 	@Override
 	public Map<String, Object> serialize() {
-		final var data = new HashMap<String, Object>(10);
-		data.put("username", this.username);
-		data.put("password", this.password);
-		data.put("hostname", this.host);
-		data.put("port", this.port);
-		data.put("driver", this.driver);
-		data.put("database", this.database);
-		data.put("poolSize", this.poolSize);
-		data.put("connectionTimeout", this.connectionTimeout);
-		data.put("idleTimeout", this.idleTimeout);
-		data.put("maxLifetime", this.maxLifetime);
-		return data;
+		// CivPatched Start
+		return Map.ofEntries(
+				Map.entry("username", this.username),
+				Map.entry("password", this.password),
+				Map.entry("hostname", this.host),
+				Map.entry("port", this.port),
+				Map.entry("driver", this.driver),
+				Map.entry("database", this.database),
+				Map.entry("poolSize", this.poolSize),
+				Map.entry("connectionTimeout", this.connectionTimeout),
+				Map.entry("idleTimeout", this.idleTimeout),
+				Map.entry("maxLifetime", this.maxLifetime)
+		);
+		// CivPatched End
 	}
 
 	@Nullable
@@ -49,26 +57,34 @@ public record DatabaseCredentials(String username,
 			return null;
 		}
 		return new DatabaseCredentials(
-				MoreMapUtils.attemptGet(data, "root",
-						"username", "user"), // keys
-				MoreMapUtils.attemptGet(data, "",
-						"password", "pass"), // keys
-				MoreMapUtils.attemptGet(data, "localhost",
-						"hostname", "host"), // keys
-				MoreMapUtils.attemptGet(data, NumberConversions::toInt, 3306,
-						"port"), // keys
-				MoreMapUtils.attemptGet(data, "mysql",
-						"driver"), // keys
-				MoreMapUtils.attemptGet(data, "minecraft",
-						"database", "dbname", "db"), // keys
-				MoreMapUtils.attemptGet(data, NumberConversions::toInt, 10,
-						"poolSize", "poolsize"), // keys
-				MoreMapUtils.attemptGet(data, NumberConversions::toLong, 10_000L,
-						"connectionTimeout", "connection_timeout"), // keys
-				MoreMapUtils.attemptGet(data, NumberConversions::toLong, 600_000L,
-						"idleTimeout", "idle_timeout"), // keys
-				MoreMapUtils.attemptGet(data, NumberConversions::toLong, 7_200_000L,
-						"maxLifetime", "max_lifetime")); // keys
+				// CivPatched Start
+				String.valueOf(MoreMapUtils.attemptGet(data, List.of("username", "user"), "root")),
+				String.valueOf(MoreMapUtils.attemptGet(data, List.of("password", "pass"), "")),
+				String.valueOf(MoreMapUtils.attemptGet(data, List.of("hostname", "host"), "localhost")),
+				NumberConversions.toInt(MoreMapUtils.attemptGet(data, List.of("port"), 3306)),
+				String.valueOf(MoreMapUtils.attemptGet(data, List.of("driver"), "mysql")),
+				String.valueOf(MoreMapUtils.attemptGet(data, List.of("database", "dbname", "db"), "minecraft")),
+				NumberConversions.toInt(MoreMapUtils.attemptGet(data, List.of("poolSize", "poolsize"), 10)),
+				NumberConversions.toLong(MoreMapUtils.attemptGet(data, List.of("connectionTimeout", "connection_timeout"), 10_000L)),
+				NumberConversions.toLong(MoreMapUtils.attemptGet(data, List.of("idleTimeout", "idle_timeout"), 600_000L)),
+				NumberConversions.toLong(MoreMapUtils.attemptGet(data, List.of("maxLifetime", "max_lifetime"), 7_200_000L))
+		);
+		// CivPatched End
 	}
 
+	// CivPatched Start
+	public @NotNull HikariConfig generateConfig() {
+		final var config = new HikariConfig();
+		config.setJdbcUrl("jdbc:" + driver() + "://" + host() + ":" + port() + "/" + database());
+		config.setConnectionTimeout(connectionTimeout());
+		config.setIdleTimeout(idleTimeout());
+		config.setMaxLifetime(maxLifetime());
+		config.setMaximumPoolSize(poolSize());
+		config.setUsername(username());
+		if (StringUtils.isNotEmpty(password())) {
+			config.setPassword(password());
+		}
+		return config;
+	}
+	// CivPatched End
 }
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseMigration.java b/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseMigration.java
index 852aabcc189759aa7078a530f57c8d496f62f250..2c49b08512b784f862ccd263e9f0fd68fa48b3e2 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseMigration.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/dao/DatabaseMigration.java
@@ -1,56 +1,106 @@
 package vg.civcraft.mc.civmodcore.dao;
 
+import java.sql.Connection;
 import java.sql.SQLException;
-import javax.annotation.Nonnull;
-import org.apache.commons.lang3.ArrayUtils;
+import java.sql.SQLWarning;
+import java.sql.Statement;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
 
 /**
- * Interface to allow for more object-oriented based migration. I've noticed as plugins get older, their DAOs get
- * larger and larger to accommodate more and more migrations. This interface allows migrations to be split up into
- * individually functional classes with the convention of NEVER using plugin APIs: that anything the migration needs
- * to do should be encapsulated within the migration class.
+ * This interface allows for a more object-oriented approach to migrations
+ * modelled after Kyori components. I've noticed as plugins get older, their
+ * DAOs get progressively larger as more and more migrations are added. This
+ * interface encourages developers to split these migrations up into individual
+ * classes with the convention of total encapsulation.
+ *
+ * @author CivPatched
  */
+@FunctionalInterface
 public interface DatabaseMigration {
+    /**
+     * Executes a query.
+     * @param logger The logger that should be specific to this particular migration.
+     * @param connection The connection to use for any queries.
+     * @return Returns whether the migration can continue.
+     */
+    boolean execute(
+            @NotNull Logger logger,
+            @NotNull Connection connection
+    ) throws SQLException;
 
-	/**
-	 * @return Returns this migration's id -- 0, 1, 2, etc, must be unique.
-	 */
-	int getMigrationId();
+    /**
+     * Run a number of queries in sequence.
+     */
+    static @NotNull DatabaseMigration sequence(
+            final @NotNull DatabaseMigration @NotNull ... queries
+    ) {
+        return sequence(List.of(queries));
+    }
 
-	/**
-	 * @return Returns whether errors in this migration should be ignored.
-	 */
-	default boolean shouldIgnoreErrors() {
-		return false;
-	}
+    /**
+     * Run a number of queries in sequence.
+     */
+    static @NotNull DatabaseMigration sequence(
+            final @NotNull List<@NotNull DatabaseMigration> queries
+    ) {
+        final var queriesCopy = List.copyOf(queries); // This is necessary since reassigning "queries" causes issues for not being "effectively final"
+        return (logger, connection) -> {
+            for (final DatabaseMigration query : queriesCopy) {
+                if (!query.execute(logger, connection)) {
+                    return false;
+                }
+            }
+            return true;
+        };
+    }
 
-	/**
-	 * @return Returns this migration's queries. Each query will be run in sequences. Must not be null or empty!
-	 */
-	@Nonnull
-	String[] getMigrationQueries();
-
-	/**
-	 * An optional callback that'll run after the migration has completed.
-	 *
-	 * @return Returns whether the callback completed successfully.
-	 */
-	default boolean migrationCallback(@Nonnull final ManagedDatasource datasource) throws SQLException {
-		return true;
-	}
-
-	/**
-	 * @param datasource The datasource to register this migration to.
-	 */
-	default void registerMigration(@Nonnull final ManagedDatasource datasource) {
-		final var queries = getMigrationQueries();
-		if (ArrayUtils.isEmpty(queries)) {
-			throw new IllegalArgumentException("Migration queries cannot be null or empty!");
-		}
-		datasource.registerMigration(getMigrationId(),
-				shouldIgnoreErrors(),
-				() -> migrationCallback(datasource),
-				queries);
-	}
+    /**
+     * Run a basic string query.
+     */
+    static @NotNull DatabaseMigration query(
+            final @NotNull String query
+    ) {
+        return query(query, false);
+    }
 
+    /**
+     * Run a basic string query.
+     *
+     * @param ignoreErrors Whether errors that occur as a result of the query can be ignored.
+     */
+    static @NotNull DatabaseMigration query(
+            final @NotNull String query,
+            final boolean ignoreErrors
+    ) {
+        if (StringUtils.isBlank(query)) {
+            throw new IllegalArgumentException("Query cannot be null or blank!");
+        }
+        return (logger, connection) -> {
+            try (final Statement statement = connection.createStatement()) {
+                statement.executeUpdate(query);
+                boolean hadErrors = false;
+                SQLWarning warning = statement.getWarnings();
+                while (warning != null) {
+                    hadErrors = true;
+                    logger.warning("Warning: " + warning.getMessage());
+                    warning = warning.getNextWarning();
+                }
+                return ignoreErrors || !hadErrors;
+            }
+            catch (final SQLException thrown) {
+                if (ignoreErrors) {
+                    logger.warning("Ignoring error: " + thrown.getMessage());
+                    return true;
+                }
+                else {
+                    logger.log(Level.SEVERE, "Failed: ", thrown);
+                    return false;
+                }
+            }
+        };
+    }
 }
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/dao/DefaultDatasource.java b/src/main/java/vg/civcraft/mc/civmodcore/dao/DefaultDatasource.java
new file mode 100644
index 0000000000000000000000000000000000000000..8ac5c108163854fe704f1c2430fd22f458f8298b
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/dao/DefaultDatasource.java
@@ -0,0 +1,49 @@
+package vg.civcraft.mc.civmodcore.dao;
+
+import java.util.Map;
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import vg.civcraft.mc.civmodcore.CivModCorePlugin;
+
+/**
+ * <p>This class is to be used in <i>other</i> plugin configs so that they can piggyback off CivModCode's database
+ * connection instead of defining, parsing, and instantiating their own.</p>
+ *
+ * <p>Example usage: <pre>{@code
+ * database:
+ *   ==: vg.civcraft.mc.civmodcore.dao.DefaultDatasource
+ * }</pre>
+ *
+ * <p>No other values are needed, nor are considered, so any other information, such as the username/hostname/etc can be
+ * commented out to reduce confusion.</p>
+ *
+ * <p><b>BE WARNED! IF YOU'RE PLANNING ON USING THIS, YOU WILL NEED TO SET YOUR POOL SIZE TO A MUCH HIGHER VALUE IN
+ * YOUR CIVMODCORE'S CONFIG!</b></p>
+ *
+ * @author CivPatched
+ */
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public final class DefaultDatasource implements ConfigurationSerializable {
+
+    private static final DefaultDatasource INSTANCE = new DefaultDatasource();
+
+    /**
+     * @return Returns CivModCore's database connection, which <i>may</i> be null.
+     */
+    public @Nullable ManagedDatasource getManagedDatasource() {
+        return CivModCorePlugin.getInstance().getDatabase();
+    }
+
+    @Override
+    public @NotNull Map<String, Object> serialize() {
+        return Map.of();
+    }
+
+    public static @NotNull DefaultDatasource deserialize(final @NotNull Map<String, Object> data) {
+        return INSTANCE;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/dao/ManagedDatasource.java b/src/main/java/vg/civcraft/mc/civmodcore/dao/ManagedDatasource.java
index 61429ec3b1155b6e7955325f216dd62c388435d2..6d807337d9b8cd66a731bb06e15ee8d90c019b15 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/dao/ManagedDatasource.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/dao/ManagedDatasource.java
@@ -4,24 +4,25 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.SQLWarning;
 import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.List;
 import java.util.NavigableMap;
 import java.util.TreeMap;
 import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
 import java.util.concurrent.TimeoutException;
 import java.util.logging.Level;
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import org.bukkit.plugin.Plugin;
 import vg.civcraft.mc.civmodcore.ACivMod;
 import vg.civcraft.mc.civmodcore.utilities.CivLogger;
-import vg.civcraft.mc.civmodcore.utilities.MoreCollectionUtils;
+
+// CivPatched Start
+import com.zaxxer.hikari.HikariConfig;
+import java.util.Arrays;
+import java.util.logging.Logger;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import vg.civcraft.mc.civmodcore.utilities.MoreMapUtils;
+// CivPatched End
 
 /**
  * Plugins should replace their custom Database handlers with an instance of ManagedDatasource.
@@ -120,23 +121,47 @@ public class ManagedDatasource {
 	private final CivLogger logger;
 	private final Plugin plugin;
 	private final ConnectionPool connections;
-	private final ExecutorService postExecutor;
-	private final TreeMap<Integer, Migration> migrations;
+	private final TreeMap<Integer, DatabaseMigration> migrations; // CivPatched
 	private int firstMigration;
 	private int lastMigration;
 
 	private ManagedDatasource(final CivLogger logger,
-							  final ACivMod plugin,
+							  final Plugin plugin, // CivPatched
 							  final ConnectionPool connections) {
 		this.logger = logger;
 		this.plugin = plugin;
 		this.connections = connections;
-		this.postExecutor = Executors.newSingleThreadExecutor();
 		this.migrations = new TreeMap<>();
 		this.firstMigration = Integer.MAX_VALUE;
 		this.lastMigration = Integer.MIN_VALUE;
 	}
 
+	// CivPatched Start
+	public static @Nullable ManagedDatasource construct(
+			final @NotNull Plugin plugin,
+			final @NotNull HikariConfig config
+	) {
+		final var logger = CivLogger.getLogger(plugin.getClass(), ManagedDatasource.class);
+		final var pool = new ConnectionPool(config);
+		try (final Connection connection = pool.getConnection()) {
+			try (final Statement statement = connection.createStatement()) {
+				statement.executeUpdate(ManagedDatasource.CREATE_MIGRATIONS_TABLE);
+			}
+			try (final Statement statement = connection.createStatement()) {
+				statement.executeUpdate(ManagedDatasource.CREATE_LOCK_TABLE);
+			}
+		}
+		catch (final SQLException exception) {
+			logger.severe("Failed to prepare migrations table or register this plugin to it.");
+			logger.log(Level.SEVERE, "Assuming you provided proper database credentials this is most likely "
+					+ "happening, because your mysql install is outdated. We recommend using MariaDB or at least the "
+					+ "latest mysql version.", exception);
+			return null;
+		}
+		return new ManagedDatasource(logger, plugin, pool);
+	}
+	// CivPatched End
+
 	/**
 	 * Create a new ManagedDatasource.
 	 *
@@ -188,26 +213,23 @@ public class ManagedDatasource {
 			logger.warning("You must pass in a set of credentials");
 			return null;
 		}
-		final var connections = new ConnectionPool(credentials);
-		logger.info(String.format("Connecting to %s@%s:%s using %s",credentials.database(),
-				credentials.host(), credentials.port(), credentials.username()));
-		try (final Connection connection = connections.getConnection()) {
-			try (final Statement statement = connection.createStatement()) {
-				statement.executeUpdate(ManagedDatasource.CREATE_MIGRATIONS_TABLE);
-			}
-			try (final Statement statement = connection.createStatement()) {
-				statement.executeUpdate(ManagedDatasource.CREATE_LOCK_TABLE);
-			}
+		return construct(plugin, credentials.generateConfig()); // CivPatched
+	}
+
+	// CivPatched Start
+	public void registerMigration(
+			final int id,
+			final @NotNull DatabaseMigration migration
+	) {
+		this.migrations.put(id, migration);
+		if (id > this.lastMigration) {
+			this.lastMigration = id;
 		}
-		catch (final SQLException exception) {
-			logger.severe("Failed to prepare migrations table or register this plugin to it.");
-			logger.log(Level.SEVERE, "Assuming you provided proper database credentials this is most likely " +
-					"happening, because your mysql install is outdated. We recommend using MariaDB or at least the " +
-					"latest mysql version.", exception);
-			return null;
+		if (id < this.firstMigration) {
+			this.firstMigration = id;
 		}
-		return new ManagedDatasource(logger, plugin, connections);
 	}
+	// CivPatched End
 
 	/**
 	 * Use this to register a migration. After all migrations have been registered, call {@link #updateDatabase()}.
@@ -218,6 +240,7 @@ public class ManagedDatasource {
 	 * @param ignoreErrors Indicates if errors in this migration should be ignored.
 	 * @param queries The queries to run, in sequence.
 	 */
+	@Deprecated // CivPatched
 	public void registerMigration(final int id,
 								  final boolean ignoreErrors,
 								  final String... queries) {
@@ -234,17 +257,49 @@ public class ManagedDatasource {
 	 * @param callback An optional callback that'll run after the migration has completed.
 	 * @param queries The queries to run, in sequence.
 	 */
+	@Deprecated // CivPatched
 	public void registerMigration(final int id,
 								  final boolean ignoreErrors,
 								  final Callable<Boolean> callback,
 								  final String... queries) {
-		this.migrations.put(id, new Migration(ignoreErrors, callback, queries));
-		if (id > this.lastMigration) {
-			this.lastMigration = id;
-		}
-		if (id < this.firstMigration) {
-			this.firstMigration = id;
-		}
+		// CivPatched Start
+		final DatabaseMigration sequence = DatabaseMigration.sequence(
+				Arrays.stream(queries)
+						.map(DatabaseMigration::query)
+						.toList()
+		);
+		registerMigration(id, (logger, connection) -> {
+			if (!sequence.execute(logger, connection)) {
+				return false;
+			}
+			if (callback != null) {
+				try {
+					if (callback.call()) {
+						logger.info("Post Call Complete");
+					}
+					else {
+						if (ignoreErrors) {
+							logger.warning("Post Call indicated failure; ignored.");
+						}
+						else {
+							logger.severe("Post Call failed!");
+							return false;
+						}
+					}
+				}
+				catch (final Throwable exception) {
+					if (ignoreErrors) {
+						logger.warning("Post Call indicated failure; ignored: " + exception.getMessage());
+					}
+					else {
+						logger.log(Level.SEVERE, "Post Call failed!", exception);
+						return false;
+					}
+				}
+			}
+			return true;
+		});
+		// CivPatched End
 	}
 
 	/**
@@ -293,7 +348,7 @@ public class ManagedDatasource {
 			releaseLock();
 			return false;
 		}
-		final NavigableMap<Integer, Migration> newApply = this.migrations.tailMap(currentLevel, false);
+		final NavigableMap<Integer, DatabaseMigration> newApply = this.migrations.tailMap(currentLevel, false); // CivPatched
 		try {
 			if (newApply.size() > 0) {
 				this.logger.info(String.format("%s database is behind, %s migrations found",
@@ -321,110 +376,56 @@ public class ManagedDatasource {
 		}
 	}
 
-	private boolean doMigrations(final NavigableMap<Integer, Migration> migrations) {
-		try {
-			for (final Integer id : migrations.keySet()) {
-				this.logger.info("Migration " +  id + " ] Applying");
-				final Migration migration = migrations.get(id);
-				if (migration == null) {
-					continue; // huh?
-				}
-				if (doMigration(id, migration.migrations, migration.ignoreErrors, migration.postMigration)) {
-					this.logger.info("Migration " +  id + " ] Successful");
-					try (final Connection connection = getConnection();
-						 final PreparedStatement statement = connection.prepareStatement(RECORD_MIGRATION)) {
-						statement.setString(1, this.plugin.getName());
-						statement.setInt(2, id);
-						if (statement.executeUpdate() < 1) {
-							this.logger.warning("Might not have recorded migration " + id + " occurrence successfully.");
-						}
-					}
-					catch (final SQLException exception) {
-						this.logger.warning("Failed to record migration " + id + " occurrence successfully.");
-						this.logger.log(Level.SEVERE, "Full Error: ", exception);
-						return false;
-					}
-				}
-				else {
-					this.logger.info("Migration " +  id + " ] Failed");
-					return false;
-				}
+	// CivPatched Start
+	private boolean doMigrations(final NavigableMap<Integer, DatabaseMigration> migrations) {
+		for (final var entry : migrations.entrySet()) {
+			if (!MoreMapUtils.validEntry(entry)) {
+				continue;
 			}
-			return true;
-		}
-		catch (final Throwable exception) {
-			this.logger.log(Level.SEVERE, "Unexpected failure during migrations", exception);
-			return false;
-		}
-	}
 
-	private boolean doMigration(final Integer migration,
-								final List<String> queries,
-								final boolean ignoreErrors,
-								final Callable<Boolean> post) {
-		try (final Connection connection = getConnection()) {
-			for (final String query : queries) {
-				try (final Statement statement = connection.createStatement()) {
-					statement.executeUpdate(query);
-					if (!ignoreErrors) { // if we ignore errors we totally ignore warnings.
-						SQLWarning warning = statement.getWarnings();
-						while (warning != null) {
-							this.logger.warning("Migration " + migration + " ] Warning: " + warning.getMessage());
-							// TODO: add verbose check
-							warning = warning.getNextWarning();
-						}
-					}
-				}
-				catch (final SQLException exception) {
-					if (ignoreErrors) {
-						this.logger.warning("Migration " + migration + " ] Ignoring error: " + exception.getMessage());
-					}
-					else {
-						throw exception;
-					}
-				}
+			final int migrationId = entry.getKey();
+			final DatabaseMigration migration = entry.getValue();
+			final Logger migrationLogger = CivLogger.inject(
+					this.logger,
+					(record) -> record.setMessage("Migration " + migrationId + "] " + record.getMessage())
+			);
+
+			migrationLogger.info("Applying");
+
+			boolean wasMigrationSuccessful;
+			try (final Connection connection = getConnection()) {
+				wasMigrationSuccessful = migration.execute(
+						migrationLogger,
+						connection
+				);
 			}
-		}
-		catch (final SQLException exception) {
-			if (ignoreErrors) {
-				this.logger.warning("Migration " + migration + " ] Ignoring error: " + exception.getMessage());
+			catch (final Throwable thrown) {
+				migrationLogger.log(Level.SEVERE, "Unexpected failure:", thrown);
+				wasMigrationSuccessful = false;
 			}
-			else {
-				this.logger.warning("Migration " + migration + " ] Failed migration: " + exception.getMessage());
-				this.logger.log(Level.SEVERE, "Full Error: ", exception);
+
+			if (!wasMigrationSuccessful) {
+				migrationLogger.info("Failed");
 				return false;
 			}
-		}
-		if (post != null) {
-			final Future<Boolean> doing = postExecutor.submit(post);
-			try {
-				if (doing.get()) {
-					this.logger.info("Migration " + migration + " ] Post Call Complete");
-				}
-				else {
-					if (ignoreErrors) {
-						this.logger.warning("Migration " + migration + " ] Post Call indicated failure; ignored.");
-					}
-					else {
-						this.logger.severe("Migration " + migration + " ] Post Call failed!");
-						return false;
-					}
+
+			migrationLogger.info("Successful");
+			try (final Connection connection = getConnection();
+				 final PreparedStatement statement = connection.prepareStatement(RECORD_MIGRATION)) {
+				statement.setString(1, this.plugin.getName());
+				statement.setInt(2, migrationId);
+				if (statement.executeUpdate() < 1) {
+					migrationLogger.warning("Might not have recorded migration occurrence successfully.");
 				}
 			}
-			catch (final Throwable exception) {
-				if (ignoreErrors) {
-					this.logger.warning("Migration " + migration + " ] Post Call indicated failure; ignored: " +
-							exception.getMessage());
-				}
-				else {
-					this.logger.severe("Migration " + migration + " ] Post Call failed!");
-					this.logger.log(Level.SEVERE, "Full Error: ", exception);
-					return false;
-				}
+			catch (final SQLException thrown) {
+				migrationLogger.log(Level.SEVERE, "Failed to record migration occurrence successfully.", thrown);
+				return false;
 			}
 		}
 		return true;
 	}
+	// CivPatched End
 
 	/**
 	 * Checks if this plugin is already managed by the ManagedDatasource infrastructure or not.
@@ -538,10 +539,4 @@ public class ManagedDatasource {
 		this.connections.close();
 	}
 
-	private static record Migration(boolean ignoreErrors, Callable<Boolean> postMigration, List<String> migrations) {
-		public Migration(boolean ignoreErrors, Callable<Boolean> postMigration, String... migrations) {
-			this(ignoreErrors, postMigration, MoreCollectionUtils.collect(ArrayList::new, migrations));
-		}
-	}
-
 }
