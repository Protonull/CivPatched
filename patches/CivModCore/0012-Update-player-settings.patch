From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Sat, 3 Jun 2023 06:26:20 +0100
Subject: [PATCH] Update player settings

Allows players to open a specific config window.

Restore setting deregistering.

Remove SETTINGS_BY_PLUGIN.

diff --git a/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java b/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
index 090172096da1d8841107efb1f99210e77c8fdfa4..dba242f180ea16e5a2597c636ebbacdb43f62c8d 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/ACivMod.java
@@ -23,6 +23,7 @@ import org.jetbrains.annotations.Contract;
 
 // CivPatched Start
 import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.players.settings.PlayerSettingAPI;
 import vg.civcraft.mc.civmodcore.utilities.defer.Deferrable;
 import vg.civcraft.mc.civmodcore.utilities.defer.DeferredFunctions;
 // CivPatched End
@@ -48,6 +49,7 @@ public abstract class ACivMod extends JavaPlugin implements Deferrable { // CivP
 	
 	@Override
 	public void onDisable() {
+		PlayerSettingAPI.deregisterAllPluginSettings(this); // CivPatched
 		this.configClasses.forEach(ConfigurationSerialization::unregisterClass);
 		getDeferredFunctions().UNSAFE_run(); // CivPatched
 	}
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
index dbf5d5e1be70d67748f0562395767d9c163b094a..2f8af326924a70313106320bb2335ce8593ccc4d 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/PlayerSettingAPI.java
@@ -3,7 +3,6 @@ package vg.civcraft.mc.civmodcore.players.settings;
 import com.google.common.base.Preconditions;
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -12,10 +11,19 @@ import java.util.Map;
 import lombok.experimental.UtilityClass;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
-import vg.civcraft.mc.civmodcore.CivModCorePlugin;
 import vg.civcraft.mc.civmodcore.players.settings.gui.MenuOption;
 import vg.civcraft.mc.civmodcore.players.settings.gui.MenuSection;
 
+// CivPatched Start
+import java.util.logging.Level;
+import java.util.TreeMap;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.config.ConfigHelper;
+import vg.civcraft.mc.civmodcore.players.settings.gui.MenuItem;
+import vg.civcraft.mc.civmodcore.utilities.MoreIterationUtils;
+// CivPatched End
+
 /**
  * Allows creating settings, which will automatically be available in players
  * configuration GUI
@@ -28,9 +36,7 @@ public final class PlayerSettingAPI {
 
 	private static final Map<String, PlayerSetting<?>> SETTINGS_BY_IDENTIFIER = new HashMap<>();
 
-	private static final Map<String, List<PlayerSetting<?>>> SETTINGS_BY_PLUGIN = new HashMap<>();
-
-	private static final MenuSection MAIN_MENU = new MenuSection("Config", "", null);
+	public static final MenuSection MAIN_MENU = new MenuSection("Config", "", null); // CivPatched: Make public
 
 	/**
 	 * @return GUI main menu
@@ -39,6 +45,18 @@ public final class PlayerSettingAPI {
 		return MAIN_MENU;
 	}
 
+	// CivPatched Start
+	public static @NotNull Map<String, MenuSection> getSubMenus() {
+		final var results = new TreeMap<String, MenuSection>(String.CASE_INSENSITIVE_ORDER);
+		for (final MenuItem item : MAIN_MENU.getItems()) {
+			if (item instanceof final MenuSection submenu) {
+				results.put(submenu.getName(), submenu);
+			}
+		}
+		return results;
+	}
+	// CivPatched End
+
 	public static Collection<PlayerSetting<?>> getAllSettings() {
 		return Collections.unmodifiableCollection(SETTINGS_BY_IDENTIFIER.values());
 	}
@@ -85,63 +103,63 @@ public final class PlayerSettingAPI {
 	public static void registerSetting(PlayerSetting<?> setting, MenuSection menu) {
 		Preconditions.checkArgument(setting != null, "Player setting cannot be null.");
 		loadValues(setting);
-		List<PlayerSetting<?>> pluginSettings = SETTINGS_BY_PLUGIN.computeIfAbsent(
-				setting.getOwningPlugin().getName(),
-				k -> new ArrayList<>());
-		Preconditions.checkArgument(!pluginSettings.contains(setting),
-				"Cannot register the same player setting twice.");
-		SETTINGS_BY_IDENTIFIER.put(setting.getIdentifier(), setting);
-		pluginSettings.add(setting);
+		// CivPatched Start
+		final PlayerSetting<?> previousSetting = SETTINGS_BY_IDENTIFIER.put(setting.getIdentifier(), setting);
+		if (previousSetting != null) {
+			previousSetting.getOwningPlugin().getLogger().log(Level.WARNING,
+					"Your setting [" + previousSetting.getIdentifier() + "] was replaced with "
+							+ "[" + setting.getOwningPlugin().getName() + ":" + setting.getIdentifier() + "]!"
+			);
+		}
+		// CivPatched End
 		if (menu != null && setting.canBeChangedByPlayer()) {
 			menu.addItem(new MenuOption(menu, setting));
 		}
 	}
 
-	// TODO: While this deregisteres the settings, those settings then need to be removed from menus
-	//    Maybe menus need a rework?
-//	public static void deregisterPluginSettings(Plugin plugin) {
-//		Preconditions.checkArgument(plugin != null);
-//		Iteration.iterateThenClear(SETTINGS_BY_PLUGIN.get(plugin.getName()), (setting) ->
-//				SETTINGS_BY_IDENTIFIER.remove(setting.getIdentifier()));
-//		SETTINGS_BY_PLUGIN.remove(plugin.getName());
-//	}
+	// CivPatched Start
+	public static void deregisterAllPluginSettings(final @NotNull JavaPlugin plugin) {
+		SETTINGS_BY_IDENTIFIER.values().removeIf((setting) -> setting.getOwningPlugin() == plugin);
+	}
+	public static void deregisterSetting(final @NotNull PlayerSetting<?> setting) {
+		SETTINGS_BY_IDENTIFIER.remove(setting.getIdentifier());
+	}
+	// CivPatched End
 
 	/**
 	 * Saves all values to their save files
 	 */
 	public static void saveAll() {
-		for (Map.Entry<String, List<PlayerSetting<?>>> pluginEntry : SETTINGS_BY_PLUGIN.entrySet()) {
-			if (pluginEntry.getValue().isEmpty()) {
-				continue;
+		// CivPatched Start
+		final Map<JavaPlugin, List<PlayerSetting<?>>> settingsByPlugin = MoreIterationUtils.groupIntoMapByKey(
+				SETTINGS_BY_IDENTIFIER.values(),
+				PlayerSetting::getOwningPlugin
+		);
+		settingsByPlugin.forEach((plugin, settings) -> {
+			final File pluginDataFolder = plugin.getDataFolder();
+			if (!pluginDataFolder.isDirectory()) {
+				//noinspection ResultOfMethodCallIgnored
+				pluginDataFolder.mkdirs();
 			}
-			File folder = pluginEntry.getValue().get(0).getOwningPlugin().getDataFolder();
-			if (!folder.isDirectory()) {
-				folder.mkdirs();
-			}
-			File file = new File(folder, FILE_NAME);
-			YamlConfiguration config;
-			if (file.isFile()) {
-				config = YamlConfiguration.loadConfiguration(file);
+			final File settingStorageFile = new File(pluginDataFolder, FILE_NAME);
+			final YamlConfiguration config;
+			if (settingStorageFile.isFile()) {
+				config = YamlConfiguration.loadConfiguration(settingStorageFile);
 			}
 			else {
 				config = new YamlConfiguration();
 			}
-			for (PlayerSetting<?> setting : pluginEntry.getValue()) {
-				ConfigurationSection section;
-				if (config.isConfigurationSection(setting.getIdentifier())) {
-					section = config.getConfigurationSection(setting.getIdentifier());
-				} else {
-					section = config.createSection(setting.getIdentifier());
-				}
-				for (Map.Entry<String, String> entry : setting.dumpAllSerialized().entrySet()) {
-					section.set(entry.getKey(), entry.getValue());
-				}
+			for (final PlayerSetting<?> setting : settings) {
+				final ConfigurationSection section = ConfigHelper.getOrCreateSection(config, setting.getIdentifier());
+				setting.dumpAllSerialized().forEach(section::set);
 			}
 			try {
-				config.save(file);
-			} catch (IOException e) {
-				CivModCorePlugin.getInstance().severe("Failed to save settings", e);
+				config.save(settingStorageFile);
 			}
-		}
+			catch (final IOException thrown) {
+				plugin.getLogger().log(Level.SEVERE, "Failed to save settings", thrown);
+			}
+		});
+		// CivPatched End
 	}
 }
diff --git a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/commands/ConfigCommand.java b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/commands/ConfigCommand.java
index f92721db9167e105b12f2e1f84aef7546c821001..e2d7c30d40043970e5c8e1ddd55ec47f4dce38fb 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/players/settings/commands/ConfigCommand.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/players/settings/commands/ConfigCommand.java
@@ -16,6 +16,15 @@ import org.bukkit.entity.Player;
 import vg.civcraft.mc.civmodcore.players.settings.PlayerSetting;
 import vg.civcraft.mc.civmodcore.players.settings.PlayerSettingAPI;
 
+// CivPatched Start
+import co.aikar.commands.annotation.CommandCompletion;
+import co.aikar.commands.annotation.Optional;
+import java.util.List;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+import vg.civcraft.mc.civmodcore.commands.TabComplete;
+// CivPatched End
+
 @CommandAlias("config")
 public final class ConfigCommand extends BaseCommand {
 
@@ -23,9 +32,25 @@ public final class ConfigCommand extends BaseCommand {
 
 	@Default
 	@Description("Allows configuring player specific settings")
-	public void openConfig(final Player sender) {
-		PlayerSettingAPI.getMainMenu().showScreen(sender);
+	// CivPatched Start
+	@CommandCompletion("@configMenuList")
+	public void openConfig(final Player sender, final @Optional String name) {
+		if (StringUtils.isBlank(name)) {
+			PlayerSettingAPI.getMainMenu().showScreen(sender);
+			return;
+		}
+		final var match = PlayerSettingAPI.getSubMenus().get(name);
+		if (match == null) {
+			sender.sendMessage(ChatColor.RED + "Could not find that config menu!");
+			return;
+		}
+		match.showScreen(sender);
+	}
+	@TabComplete("configMenuList")
+	public @NotNull List<String> tabConfigMenus() {
+		return List.copyOf(PlayerSettingAPI.getSubMenus().keySet());
 	}
+	// CivPatched End
 
 	@Subcommand("save")
 	@Description("Save all settings to the file.")
