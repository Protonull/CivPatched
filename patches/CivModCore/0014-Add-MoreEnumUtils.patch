From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Sat, 13 May 2023 18:21:07 +0100
Subject: [PATCH] Add MoreEnumUtils


diff --git a/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..692b5df27f083c7da6ead64fca1b2b9c578b64af
--- /dev/null
+++ b/src/main/java/vg/civcraft/mc/civmodcore/utilities/MoreEnumUtils.java
@@ -0,0 +1,82 @@
+package vg.civcraft.mc.civmodcore.utilities;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import lombok.experimental.UtilityClass;
+import org.apache.commons.lang3.EnumUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Utility class that fills in the gaps of {@link EnumUtils}.
+ *
+ * @author CivPatched
+ */
+@UtilityClass
+public class MoreEnumUtils {
+
+    /**
+     * @param <E> The enum type itself.
+     * @param value The enum value to stringify.
+     * @return Returns a string-version of the given enum, or "null".
+     */
+    public <E extends Enum<E>> @NotNull String getName(final E value) {
+        return value == null ? "null" : value.name();
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enumClass The enum class to get the names of.
+     * @return Returns a set of all enum-names of the given enum-class.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final @NotNull Class<E> enumClass) {
+        return Stream.of(enumClass.getEnumConstants())
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to convert into names.
+     * @return Returns a set of all enum-names of the given enums.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final E @NotNull [] enums) {
+        return Arrays.stream(enums)
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to convert into names.
+     * @return Returns a set of all enum-names of the given enums.
+     */
+    public <E extends Enum<E>> @NotNull List<String> getNames(final @NotNull Collection<E> enums) {
+        return enums
+                .stream()
+                .map(MoreEnumUtils::getName)
+                .collect(Collectors.toList());
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to join together into a string.
+     * @return Returns a string representing the given enums. Can be empty.
+     */
+    public <E extends Enum<E>> @NotNull String join(final E @NotNull [] enums) {
+        return StringUtils.join(getNames(enums), ",");
+    }
+
+    /**
+     * @param <E> The enum type itself.
+     * @param enums The enums to join together into a string.
+     * @return Returns a string representing the given enums. Can be empty.
+     */
+    public <E extends Enum<E>> @NotNull String join(final @NotNull Collection<E> enums) {
+        return StringUtils.join(getNames(enums), ",");
+    }
+
+}
\ No newline at end of file
