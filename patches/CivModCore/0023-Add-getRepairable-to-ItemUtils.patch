From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Wed, 17 May 2023 16:16:45 +0100
Subject: [PATCH] Add getRepairable to ItemUtils

This is pretty identical to getDamageable, except it returns the Repairable type instead.

diff --git a/src/main/java/vg/civcraft/mc/civmodcore/inventory/items/ItemUtils.java b/src/main/java/vg/civcraft/mc/civmodcore/inventory/items/ItemUtils.java
index f84ec069bd4bd46c38f473c1eb06d47bce8576c5..52423d06f81d3f61ca410b9df8c42117f5159024 100644
--- a/src/main/java/vg/civcraft/mc/civmodcore/inventory/items/ItemUtils.java
+++ b/src/main/java/vg/civcraft/mc/civmodcore/inventory/items/ItemUtils.java
@@ -18,6 +18,10 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.jetbrains.annotations.Contract;
 import vg.civcraft.mc.civmodcore.chat.ChatUtils;
 
+// CivPatched Start
+import org.bukkit.inventory.meta.Repairable;
+// CivPatched End
+
 /**
  * Class of static APIs for Items. Replaces ISUtils.
  */
@@ -410,6 +414,26 @@ public final class ItemUtils {
 		return null;
 	}
 
+	// CivPatched Start
+	/**
+	 * Retrieves the Repairable ItemMeta only if it's relevant to the item. This is necessary because [almost?] every
+	 * ItemMeta implements Repairable... for some reason. And so this will only return a Repairable instance if the
+	 * item material actually has a maximum durability above zero.
+	 */
+	public static @Nullable Repairable getRepairable(final @Nullable ItemStack item) {
+		if (item == null) {
+			return null;
+		}
+		final Material material = item.getType();
+		if (isValidItemMaterial(material)
+				&& material.getMaxDurability() > 0
+				&& getItemMeta(item) instanceof Repairable repairable) {
+			return repairable;
+		}
+		return null;
+	}
+	// CivPatched End
+
 	/**
 	 * Makes an item glow by adding an enchantment and the flag for hiding enchantments, so it has the enchantment glow
 	 * without an enchantment being visible. Note that this does actually apply an enchantment to an item.
