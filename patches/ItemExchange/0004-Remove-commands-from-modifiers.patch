From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Wed, 17 May 2023 17:29:00 +0100
Subject: [PATCH] Remove commands from modifiers

This was a decision made from encapsulation brainrot that EVERYTHING needs to be encapsulated.

diff --git a/src/main/java/com/untamedears/itemexchange/commands/SetCommand.java b/src/main/java/com/untamedears/itemexchange/commands/SetCommand.java
index ab912bb18bf1e1416d3f1d3e6daf97604083c9b7..8de4cbdbf2b29e87953b775e000f6be43e004024 100644
--- a/src/main/java/com/untamedears/itemexchange/commands/SetCommand.java
+++ b/src/main/java/com/untamedears/itemexchange/commands/SetCommand.java
@@ -16,6 +16,28 @@ import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import vg.civcraft.mc.civmodcore.inventory.items.ItemUtils;
 
+// CivPatched Start
+import co.aikar.commands.annotation.Optional;
+import com.untamedears.itemexchange.rules.modifiers.DamageableModifier;
+import com.untamedears.itemexchange.rules.modifiers.DisplayNameModifier;
+import com.untamedears.itemexchange.rules.modifiers.EnchantModifier;
+import com.untamedears.itemexchange.rules.modifiers.LoreModifier;
+import com.untamedears.itemexchange.rules.modifiers.RepairModifier;
+import com.untamedears.itemexchange.utility.ModifierHandler;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.apache.commons.lang3.StringUtils;
+import org.bukkit.enchantments.Enchantment;
+import vg.civcraft.mc.civmodcore.chat.ChatUtils;
+import vg.civcraft.mc.civmodcore.inventory.items.EnchantUtils;
+// CivPatched End
+
 @CommandAlias(SetCommand.ALIAS)
 public final class SetCommand extends BaseCommand {
 
@@ -74,4 +96,278 @@ public final class SetCommand extends BaseCommand {
 		}
 	}
 
+	// CivPatched until end of file
+
+	// ------------------------------------------------------------
+	// Display Name
+	// ------------------------------------------------------------
+
+	@Subcommand("displayname|display|name")
+	@Description("Sets or resets the item's display name.")
+	@Syntax("[name]")
+	public void setDisplayName(
+			final Player player,
+			final @Optional String value
+	) {
+		try (final var handler = new ModifierHandler<>(player, DisplayNameModifier.TEMPLATE)) {
+			if (StringUtils.isEmpty(value)) {
+				handler.setModifier(null);
+				handler.relay(ChatColor.GREEN + "Now ignoring display names.");
+			}
+			else {
+				handler.ensureModifier().setDisplayName(value);
+				handler.relay(ChatColor.GREEN + "Display name set to: " + value);
+			}
+		}
+	}
+
+	@Subcommand("ignoredisplayname|ignoredisplay|ignorename")
+	@Description("Toggles the rule of ignoring display names.")
+	public void toggleIgnoreDisplayName(
+			final Player player
+	) {
+		try (final var handler = new ModifierHandler<>(player, DisplayNameModifier.TEMPLATE)) {
+			if (handler.getModifier() == null) {
+				handler.ensureModifier();
+				handler.relay(ChatColor.GREEN + "That rule will no longer ignore display names.");
+			}
+			else {
+				handler.setModifier(null);
+				handler.relay(ChatColor.GREEN + "That rule will now ignore display names.");
+			}
+		}
+	}
+
+	// ------------------------------------------------------------
+	// Lore
+	// ------------------------------------------------------------
+
+	@Subcommand("ignorelore")
+	@Description("Removes the lore modifier.")
+	public void ignoreLore(
+			final Player player
+	) {
+		try (final var handler = new ModifierHandler<>(player, LoreModifier.TEMPLATE)) {
+			handler.setModifier(null);
+			handler.relay(ChatColor.GREEN + "Now ignoring lore.");
+		}
+	}
+
+	@Subcommand("lore")
+	@Description("Sets or resets the item's lore.")
+	@Syntax("[...lore]")
+	public void setLore(
+			final Player player,
+			final @Optional String value
+	) {
+		try (final var handler = new ModifierHandler<>(player, LoreModifier.TEMPLATE)) {
+			final LoreModifier modifier = handler.ensureModifier();
+			if (StringUtils.isEmpty(value)) {
+				modifier.setLore(null);
+				handler.relay(ChatColor.GREEN + "Successfully removed lore.");
+			}
+			else {
+				modifier.setLore(Arrays.stream(StringUtils.split(";"))
+						.map(ChatUtils::parseComponent)
+						.map((component) -> Objects.requireNonNullElse(component, Component.empty()))
+						.map(LegacyComponentSerializer.legacySection()::serialize)
+						.toList()
+				);
+				handler.relay(ChatColor.GREEN + "Successfully changed lore.");
+			}
+		}
+	}
+
+	// ------------------------------------------------------------
+	// Enchantments
+	// ------------------------------------------------------------
+
+	public static final Pattern SET_ENCHANT_PATTERN = Pattern.compile("^([+?\\-])([A-Za-z_]+)([\\d]*)$");
+
+	@Subcommand("ignoreenchantments|ignoreenchants")
+	@Description("Allows items with unspecified enchantments to be bought and sold.")
+	public void ignoreEnchantments(
+			final Player player
+	) {
+		try (final var handler = new ModifierHandler<>(player, EnchantModifier.TEMPLATE)) {
+			handler.setModifier(null);
+			handler.relay(ChatColor.GREEN + "Now ignoring enchantments.");
+		}
+	}
+
+	@Subcommand("allowenchantments|allowenchants")
+	@Description("Allows items with unspecified enchantments to be bought and sold.")
+	public void allowUnlistedEnchantments(
+			final Player player
+	) {
+		try (final var handler = new ModifierHandler<>(player, EnchantModifier.TEMPLATE)) {
+			handler.ensureModifier().setAllowUnlistedEnchants(true);
+			handler.relay(ChatColor.GREEN + "Unlisted enchantments are now allowed.");
+		}
+	}
+
+	@Subcommand("denyenchantments|denyenchants")
+	@Description("Disallows items with unspecified enchantments to be bought and sold.")
+	public void disallowUnlistedEnchantments(
+			final Player player
+	) {
+		try (final var handler = new ModifierHandler<>(player, EnchantModifier.TEMPLATE)) {
+			handler.ensureModifier().setAllowUnlistedEnchants(false);
+			handler.relay(ChatColor.GREEN + "Unlisted enchantments are now denied.");
+		}
+	}
+
+	@Subcommand("enchantment|enchant|e")
+	@Description("Disallows items with unspecified enchantments to be bought and sold.")
+	@Syntax("<+/?/-><enchantment>[level]")
+	public void setEnchantment(
+			final Player player,
+			final @Single String details
+	) {
+		try (final var handler = new ModifierHandler<>(player, EnchantModifier.TEMPLATE)) {
+			final EnchantModifier modifier = handler.ensureModifier();
+			if (StringUtils.isEmpty(details)) {
+				throw new InvalidCommandArgument("You must enter an enchantment.");
+			}
+			final Matcher matcher = SET_ENCHANT_PATTERN.matcher(details);
+			if (!matcher.matches()) {
+				throw new InvalidCommandArgument("You must enter a valid instruction.");
+			}
+			final Enchantment enchantment = EnchantUtils.getEnchantment(matcher.group(2));
+			if (enchantment == null) {
+				throw new InvalidCommandArgument("You must enter a valid enchantment.");
+			}
+			final Map<Enchantment, Integer> required = modifier.getRequiredEnchants();
+			final Set<Enchantment> excluded = modifier.getExcludedEnchants();
+			switch (matcher.group(1)) {
+				case "+" -> {
+					int level = ExchangeRule.ERROR;
+					if (matcher.groupCount() < 3) {
+						level = ExchangeRule.ANY;
+					}
+					else {
+						try {
+							level = Integer.parseInt(matcher.group(3));
+						}
+						catch (Exception ignored) { } // No need to error here because it'll error below
+						if (level < enchantment.getStartLevel() || level > enchantment.getMaxLevel()) {
+							throw new InvalidCommandArgument("You must enter a valid level.");
+						}
+					}
+					required.put(enchantment, level);
+					excluded.remove(enchantment);
+					handler.relay(ChatColor.GREEN + "Successfully added required enchantment.");
+				}
+				case "-" -> {
+					required.remove(enchantment);
+					excluded.add(enchantment);
+					handler.relay(ChatColor.GREEN + "Successfully added excluded enchantment.");
+				}
+				case "?" -> {
+					required.remove(enchantment);
+					excluded.remove(enchantment);
+					handler.relay(ChatColor.GREEN + "Successfully removed rules relating to enchantment.");
+				}
+				default -> {
+					throw new InvalidCommandArgument("You entered an invalid instruction.");
+				}
+			}
+			modifier.setRequiredEnchants(required);
+			modifier.setExcludedEnchants(excluded);
+		}
+	}
+
+	// ------------------------------------------------------------
+	// Damageable
+	// ------------------------------------------------------------
+
+	@Subcommand("durability|d|damage|dmg")
+	@Description("Sets the durability of an exchange rule.")
+	@Syntax("<durability>")
+	public void setDurability(
+			final Player player,
+			final @Optional @Single String value
+	) {
+		try (final var handler = new ModifierHandler<>(player, DamageableModifier.TEMPLATE)) {
+			if (StringUtils.isEmpty(value)) {
+				handler.setModifier(null);
+				handler.relay(ChatColor.GREEN + "Now ignoring durability.");
+				return;
+			}
+			final DamageableModifier modifier = handler.ensureModifier();
+			switch (value.toUpperCase()) {
+				case "ANY", "%", "*" -> {
+					modifier.setDamage(ExchangeRule.ANY);
+					handler.relay(ChatColor.YELLOW + "Modifier will now accept any damage level.");
+				}
+				case "DAMAGED", "USED" -> {
+					modifier.setDamage(ExchangeRule.USED);
+					handler.relay(ChatColor.YELLOW + "Modifier will only accept damaged items.");
+				}
+				default -> {
+					short durability = ExchangeRule.ERROR;
+					try {
+						durability = Short.parseShort(value);
+						if (durability < 0) {
+							durability = ExchangeRule.ERROR;
+						}
+					}
+					catch (final NumberFormatException ignored) { }
+					if (durability == ExchangeRule.ERROR) {
+						throw new InvalidCommandArgument("Please enter a valid durability.");
+					}
+					modifier.setDamage(durability);
+					handler.relay(ChatColor.YELLOW + "Successfully set a new damage level!");
+				}
+			}
+		}
+	}
+
+	// ------------------------------------------------------------
+	// Repairable
+	// ------------------------------------------------------------
+
+	@Subcommand("repair|repairlevel")
+	@Description("Sets or resets the exchange's repair level.")
+	@Syntax("[repair level]")
+	public void setRepairLevel(
+			final Player player,
+			final @Optional @Single String value
+	) {
+		try (final var handler = new ModifierHandler<>(player, RepairModifier.TEMPLATE)) {
+			if (StringUtils.isEmpty(value)) {
+				handler.setModifier(null);
+				handler.relay(ChatColor.GREEN + "Successfully removed repair level condition.");
+				return;
+			}
+			final RepairModifier modifier = handler.ensureModifier();
+			if (value.startsWith("@")) {
+				int repairLevel = ExchangeRule.ERROR;
+				try {
+					repairLevel = Integer.parseInt(value.substring(1));
+				}
+				catch (final NumberFormatException ignored) { }
+				if (repairLevel < 2) {
+					throw new InvalidCommandArgument("You must enter a valid value, e.g: @9");
+				}
+				modifier.setRepairCost(repairLevel - 2);
+			}
+			else if (StringUtils.equalsIgnoreCase(value, "NEW") || StringUtils.equalsIgnoreCase(value, "MINT")) {
+				modifier.setRepairCost(0);
+			}
+			else {
+				int repairLevel = ExchangeRule.ERROR;
+				try {
+					repairLevel = Integer.parseInt(value);
+				}
+				catch (final NumberFormatException ignored) { }
+				if (repairLevel < 2) {
+					throw new InvalidCommandArgument("You must enter a valid value, e.g: 9");
+				}
+				modifier.setRepairCost((repairLevel - 2) * -1);
+			}
+			handler.relay(ChatColor.GREEN + "Successfully changed repair level condition.");
+		}
+	}
+
 }
diff --git a/src/main/java/com/untamedears/itemexchange/glues/namelayer/GroupModifier.java b/src/main/java/com/untamedears/itemexchange/glues/namelayer/GroupModifier.java
index 12aafba4459d0debf48d8739cc03bb339dedac02..049e822dae539f92c53839e7e926343763d36cfb 100644
--- a/src/main/java/com/untamedears/itemexchange/glues/namelayer/GroupModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/glues/namelayer/GroupModifier.java
@@ -1,32 +1,19 @@
 package com.untamedears.itemexchange.glues.namelayer;
 
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Optional;
-import co.aikar.commands.annotation.Single;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
 import com.untamedears.itemexchange.ItemExchangeListener;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import java.util.List;
-import org.apache.commons.lang3.StringUtils;
 import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
-import vg.civcraft.mc.namelayer.GroupManager;
-import vg.civcraft.mc.namelayer.group.Group;
 
 /**
  * This is where the group limitation is stored. Don't worry if it doesn't seem to do much, it's actually
  * not supposed to. The logic behind group limitations is done within {@link ItemExchangeListener},
  * so take a look at that. This is basically just a place to store the group value.
  */
-@CommandAlias(SetCommand.ALIAS) // This is needed to make commands work
 @Modifier(slug = "GROUP", order = 2000)
 public final class GroupModifier extends ModifierData {
 
@@ -79,37 +66,6 @@ public final class GroupModifier extends ModifierData {
 		return "%S{%s:%d}".formatted(getSlug(), getGroupName(), getGroupId());
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("group")
-	@Description("Sets (or unsets) the group to limit this trade to.")
-	@Syntax("[group name]")
-	public void commandSetGroup(final Player player,
-								final @Optional @Single String name) {
-		if (!NameLayerGlue.instance.isDependencyEnabled()) {
-			player.sendMessage(ChatColor.RED + "Can't do that right now!");
-			return;
-		}
-		try (final var handler = new ModifierHandler<>(player, this)) {
-			if (StringUtils.isEmpty(name)) {
-				handler.setModifier(null);
-				handler.relay(ChatColor.GREEN + "Successfully removed group requirement.");
-				return;
-			}
-			final Group group = GroupManager.getGroup(name);
-			if (group == null) {
-				handler.relay(ChatColor.RED + "Could not find group \"" + name + "\"");
-				return;
-			}
-			final GroupModifier modifier = handler.ensureModifier();
-			modifier.setGroupId(group.getGroupId());
-			modifier.setGroupName(group.getName());
-			handler.relay(ChatColor.GREEN + "Set trade to group \"" + group.getName() + "\"");
-		}
-	}
-
 	// ------------------------------------------------------------
 	// Getters + Setters
 	// ------------------------------------------------------------
diff --git a/src/main/java/com/untamedears/itemexchange/glues/namelayer/NameLayerGlue.java b/src/main/java/com/untamedears/itemexchange/glues/namelayer/NameLayerGlue.java
index a595f8de58802ff271dc3ea4252ff2a62dac54f9..e1dd1190de454e56db75d752ac6795e8f9925c26 100644
--- a/src/main/java/com/untamedears/itemexchange/glues/namelayer/NameLayerGlue.java
+++ b/src/main/java/com/untamedears/itemexchange/glues/namelayer/NameLayerGlue.java
@@ -10,6 +10,22 @@ import vg.civcraft.mc.civmodcore.utilities.DependencyGlue;
 import vg.civcraft.mc.civmodcore.utilities.Validation;
 import vg.civcraft.mc.namelayer.GroupManager;
 
+// CivPatched Start
+import co.aikar.commands.BaseCommand;
+import co.aikar.commands.annotation.Description;
+import co.aikar.commands.annotation.Optional;
+import co.aikar.commands.annotation.Single;
+import co.aikar.commands.annotation.Subcommand;
+import co.aikar.commands.annotation.Syntax;
+import com.untamedears.itemexchange.commands.SetCommand;
+import com.untamedears.itemexchange.utility.ModifierHandler;
+import org.apache.commons.lang3.StringUtils;
+import org.bukkit.ChatColor;
+import org.bukkit.entity.Player;
+import vg.civcraft.mc.civmodcore.commands.NamedCommand;
+import vg.civcraft.mc.namelayer.group.Group;
+// CivPatched End
+
 public final class NameLayerGlue extends DependencyGlue {
 
 	static NameLayerGlue instance;
@@ -32,15 +48,50 @@ public final class NameLayerGlue extends DependencyGlue {
 		}
 	};
 
+	// CivPatched Start
+	private final BaseCommand setCommand = new NamedCommand(SetCommand.ALIAS) {
+		@Subcommand("group")
+		@Description("Sets (or unsets) the group to limit this trade to.")
+		@Syntax("[group name]")
+		public void setGroup(
+				final Player player,
+				final @Optional @Single String name
+		) {
+			if (!NameLayerGlue.instance.isDependencyEnabled()) {
+				player.sendMessage(ChatColor.RED + "Can't do that right now!");
+				return;
+			}
+			try (final var handler = new ModifierHandler<>(player, GroupModifier.TEMPLATE)) {
+				if (StringUtils.isEmpty(name)) {
+					handler.setModifier(null);
+					handler.relay(ChatColor.GREEN + "Successfully removed group requirement.");
+					return;
+				}
+				final Group group = GroupManager.getGroup(name);
+				if (group == null) {
+					handler.relay(ChatColor.RED + "Could not find group \"" + name + "\"");
+					return;
+				}
+				final GroupModifier modifier = handler.ensureModifier();
+				modifier.setGroupId(group.getGroupId());
+				modifier.setGroupName(group.getName());
+				handler.relay(ChatColor.GREEN + "Set trade to group \"" + group.getName() + "\"");
+			}
+		}
+	};
+	// CivPatched End
+
 	@Override
 	protected void onDependencyEnabled() {
 		PermissionsGlue.init();
 		ItemExchangePlugin.modifierRegistrar().registerModifier(GroupModifier.TEMPLATE);
 		ItemExchangePlugin.getInstance().registerListener(this.listener);
+		ItemExchangePlugin.commandManager().registerCommand(this.setCommand); // CivPatched
 	}
 
 	@Override
 	protected void onDependencyDisabled() {
+		ItemExchangePlugin.commandManager().unregisterCommand(this.setCommand); // CivPatched
 		HandlerList.unregisterAll(this.listener);
 		ItemExchangePlugin.modifierRegistrar().deregisterModifier(GroupModifier.TEMPLATE);
 		PermissionsGlue.reset();
diff --git a/src/main/java/com/untamedears/itemexchange/rules/ModifierRegistrar.java b/src/main/java/com/untamedears/itemexchange/rules/ModifierRegistrar.java
index 390b623a1ba31a888905a1f6db1d3d0408ee903b..a93854829457f358014b9c04bea026599134524e 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/ModifierRegistrar.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/ModifierRegistrar.java
@@ -1,6 +1,5 @@
 package com.untamedears.itemexchange.rules;
 
-import com.untamedears.itemexchange.ItemExchangePlugin;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
 import com.untamedears.itemexchange.utility.ModifierStorage;
 import java.lang.reflect.Modifier;
@@ -27,7 +26,6 @@ public final class ModifierRegistrar {
 			throw new IllegalArgumentException("That modifier is not final.");
 		}
 		this.modifiers.put(modifier);
-		ItemExchangePlugin.commandManager().registerCommand(modifier);
 	}
 
 	/**
@@ -40,7 +38,6 @@ public final class ModifierRegistrar {
 			return;
 		}
 		this.modifiers.remove(modifier);
-		ItemExchangePlugin.commandManager().unregisterCommand(modifier);
 	}
 
 	/**
@@ -84,9 +81,6 @@ public final class ModifierRegistrar {
 	 * De-registers all registered modifiers.
 	 */
 	public void reset() {
-		for (ModifierData modifier : this.modifiers) {
-			ItemExchangePlugin.commandManager().unregisterCommand(modifier);
-		}
 		this.modifiers.clear();
 	}
 
diff --git a/src/main/java/com/untamedears/itemexchange/rules/interfaces/ModifierData.java b/src/main/java/com/untamedears/itemexchange/rules/interfaces/ModifierData.java
index bdf97bf1dc8be56668b5b178a1bff5cbd41155bd..b7f6e0969b032f7f88712c9a4e1c422579fa78ac 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/interfaces/ModifierData.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/interfaces/ModifierData.java
@@ -1,6 +1,5 @@
 package com.untamedears.itemexchange.rules.interfaces;
 
-import co.aikar.commands.BaseCommand;
 import com.untamedears.itemexchange.rules.ExchangeRule;
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;
@@ -17,8 +16,7 @@ import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
  *
  * {@code public final class BookModifier extends ModifierData<BookModifier> {}}
  */
-public abstract class ModifierData extends BaseCommand
-		implements ExchangeData, NBTSerializable, Comparable<ModifierData> {
+public abstract class ModifierData implements ExchangeData, NBTSerializable, Comparable<ModifierData> { // CivPatched
 
 	private static final int hashOffset = 37513459;
 
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/BookModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/BookModifier.java
index cb861121247058c791992f437338580781b61f0d..cb67b5c4b817901a905231387418d30b7afcc033 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/BookModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/BookModifier.java
@@ -1,8 +1,6 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
 import com.google.common.base.Strings;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
 import java.util.ArrayList;
@@ -18,7 +16,6 @@ import org.bukkit.inventory.meta.BookMeta.Generation;
 import vg.civcraft.mc.civmodcore.nbt.NBTType;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "BOOK", order = 1000)
 public final class BookModifier extends ModifierData {
 
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/DamageableModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/DamageableModifier.java
index 5a274e4c0f22c5f8fa4cd2143b3edfc1108352cb..91504b28a17d867086ac2b67b30056677367ccce 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/DamageableModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/DamageableModifier.java
@@ -1,30 +1,18 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.InvalidCommandArgument;
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Optional;
-import co.aikar.commands.annotation.Single;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
-import com.google.common.base.Strings;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.ExchangeRule;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import java.util.Collections;
 import java.util.List;
 import javax.annotation.Nonnull;
 import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.Damageable;
 import vg.civcraft.mc.civmodcore.inventory.items.ItemUtils;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.MoreClassUtils;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "DAMAGE", order = 500)
 public final class DamageableModifier extends ModifierData {
 
@@ -104,55 +92,6 @@ public final class DamageableModifier extends ModifierData {
 		}
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("durability|d|damage|dmg")
-	@Description("Sets the durability of an exchange rule.")
-	@Syntax("<durability>")
-	public void commandSetDurability(Player player, @Optional @Single String value) {
-		try (ModifierHandler<DamageableModifier> handler = new ModifierHandler<>(player, this)) {
-			if (Strings.isNullOrEmpty(value)) {
-				handler.setModifier(null);
-				handler.relay(ChatColor.GREEN + "Now ignoring durability.");
-				return;
-			}
-			DamageableModifier modifier = handler.ensureModifier();
-			switch (value.toUpperCase()) {
-				case "ANY":
-				case "%":
-				case "*": {
-					modifier.setDamage(ExchangeRule.ANY);
-					handler.relay(ChatColor.YELLOW + "Modifier will now accept any damage level.");
-					break;
-				}
-				case "DAMAGED":
-				case "USED": {
-					modifier.setDamage(ExchangeRule.USED);
-					handler.relay(ChatColor.YELLOW + "Modifier will only accept damaged items.");
-					break;
-				}
-				default:
-					short durability = ExchangeRule.ERROR;
-					try {
-						durability = Short.parseShort(value);
-						if (durability < 0) {
-							durability = ExchangeRule.ERROR;
-						}
-					}
-					catch (NumberFormatException ignored) {
-					}
-					if (durability == ExchangeRule.ERROR) {
-						throw new InvalidCommandArgument("Please enter a valid durability.");
-					}
-					modifier.setDamage(durability);
-					handler.relay(ChatColor.YELLOW + "Successfully set a new damage level!");
-					break;
-			}
-		}
-	}
-
 	@Override
 	public String toString() {
 		return getSlug() +
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/DisplayNameModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/DisplayNameModifier.java
index 7f4bedc1b180045307dbd69936936da2ba351570..2c68a8b8ed4c9150a9f351fec14c16651e8806a0 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/DisplayNameModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/DisplayNameModifier.java
@@ -1,24 +1,14 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Optional;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
 import com.google.common.base.Strings;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import javax.annotation.Nonnull;
 import org.apache.commons.lang3.StringUtils;
-import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "DISPLAY", order = 100)
 public final class DisplayNameModifier extends ModifierData {
 
@@ -83,41 +73,6 @@ public final class DisplayNameModifier extends ModifierData {
 				"}";
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("displayname|display|name")
-	@Description("Sets or resets the item's display name.")
-	@Syntax("[name]")
-	public void commandSetDisplayName(Player player, @Optional String value) {
-		try (ModifierHandler<DisplayNameModifier> handler = new ModifierHandler<>(player, this)) {
-			if (Strings.isNullOrEmpty(value)) {
-				handler.setModifier(null);
-				handler.relay(ChatColor.GREEN + "Now ignoring display names.");
-			}
-			else {
-				handler.ensureModifier().setDisplayName(value);
-				handler.relay(ChatColor.GREEN + "Display name set to: " + value);
-			}
-		}
-	}
-
-	@Subcommand("ignoredisplayname|ignoredisplay|ignorename")
-	@Description("Toggles the rule of ignoring display names.")
-	public void commandToggleIgnoreDisplayName(Player player) {
-		try (ModifierHandler<DisplayNameModifier> handler = new ModifierHandler<>(player, this)) {
-			if (handler.getModifier() == null) {
-				handler.ensureModifier();
-				handler.relay(ChatColor.GREEN + "That rule will no longer ignore display names.");
-			}
-			else {
-				handler.setModifier(null);
-				handler.relay(ChatColor.GREEN + "That rule will now ignore display names.");
-			}
-		}
-	}
-
 	// ------------------------------------------------------------
 	// Getters + Setters
 	// ------------------------------------------------------------
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantModifier.java
index 94881edae3ba61be7e466ed7554862e9929dbf50..f2e1289d331a01f2adf2281a3c48d7935c58b505 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantModifier.java
@@ -1,20 +1,11 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.InvalidCommandArgument;
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Single;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
-import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.ExchangeRule;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import com.untamedears.itemexchange.utility.NBTEncodings;
 import com.untamedears.itemexchange.utility.Utilities;
 import java.util.Arrays;
@@ -24,25 +15,20 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import javax.annotation.Nonnull;
 import org.bukkit.ChatColor;
 import org.bukkit.enchantments.Enchantment;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import vg.civcraft.mc.civmodcore.inventory.items.EnchantUtils;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.KeyedUtils;
 import vg.civcraft.mc.civmodcore.utilities.MoreMapUtils;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "ENCHANTS", order = 200)
 public final class EnchantModifier extends ModifierData {
 
 	public static final EnchantModifier TEMPLATE = new EnchantModifier();
-	public static final Pattern SET_ENCHANT_PATTERN = Pattern.compile("^([+?\\-])([A-Za-z_]+)([\\d]*)$");
 
 	public static final String REQUIRED_KEY = "required";
 	public static final String EXCLUDED_KEY = "excluded";
@@ -140,98 +126,6 @@ public final class EnchantModifier extends ModifierData {
 				"}";
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("ignoreenchantments|ignoreenchants")
-	@Description("Allows items with unspecified enchantments to be bought and sold.")
-	public void commandIgnoreEnchantments(Player player) {
-		try (ModifierHandler<EnchantModifier> handler = new ModifierHandler<>(player, this)) {
-			handler.setModifier(null);
-			handler.relay(ChatColor.GREEN + "Now ignoring enchantments.");
-		}
-	}
-
-	@Subcommand("allowenchantments|allowenchants")
-	@Description("Allows items with unspecified enchantments to be bought and sold.")
-	public void commandAllowUnlistedEnchantments(Player player) {
-		try (ModifierHandler<EnchantModifier> handler = new ModifierHandler<>(player, this)) {
-			handler.ensureModifier().setAllowUnlistedEnchants(true);
-			handler.relay(ChatColor.GREEN + "Unlisted enchantments are now allowed.");
-		}
-	}
-
-	@Subcommand("denyenchantments|denyenchants")
-	@Description("Disallows items with unspecified enchantments to be bought and sold.")
-	public void commandDisallowUnlistedEnchantments(Player player) {
-		try (ModifierHandler<EnchantModifier> handler = new ModifierHandler<>(player, this)) {
-			handler.ensureModifier().setAllowUnlistedEnchants(false);
-			handler.relay(ChatColor.GREEN + "Unlisted enchantments are now denied.");
-		}
-	}
-
-	@Subcommand("enchantment|enchant|e")
-	@Description("Disallows items with unspecified enchantments to be bought and sold.")
-	@Syntax("<+/?/-><enchantment>[level]")
-	public void commandSetEnchantment(Player player, @Single String details) {
-		try (ModifierHandler<EnchantModifier> handler = new ModifierHandler<>(player, this)) {
-			EnchantModifier modifier = handler.ensureModifier();
-			if (Strings.isNullOrEmpty(details)) {
-				throw new InvalidCommandArgument("You must enter an enchantment.");
-			}
-			Matcher matcher = SET_ENCHANT_PATTERN.matcher(details);
-			if (!matcher.matches()) {
-				throw new InvalidCommandArgument("You must enter a valid instruction.");
-			}
-			Enchantment enchantment = EnchantUtils.getEnchantment(matcher.group(2));
-			if (enchantment == null) {
-				throw new InvalidCommandArgument("You must enter a valid enchantment.");
-			}
-			Map<Enchantment, Integer> required = modifier.getRequiredEnchants();
-			Set<Enchantment> excluded = modifier.getExcludedEnchants();
-			switch (matcher.group(1)) {
-				case "+": {
-					int level = ExchangeRule.ERROR;
-					if (matcher.groupCount() < 3) {
-						level = ExchangeRule.ANY;
-					}
-					else {
-						try {
-							level = Integer.parseInt(matcher.group(3));
-						}
-						catch (Exception ignored) {
-						} // No need to error here because it'll error below
-						if (level < enchantment.getStartLevel() || level > enchantment.getMaxLevel()) {
-							throw new InvalidCommandArgument("You must enter a valid level.");
-						}
-					}
-					required.put(enchantment, level);
-					excluded.remove(enchantment);
-					handler.relay(ChatColor.GREEN + "Successfully added required enchantment.");
-					break;
-				}
-				case "-": {
-					required.remove(enchantment);
-					excluded.add(enchantment);
-					handler.relay(ChatColor.GREEN + "Successfully added excluded enchantment.");
-					break;
-				}
-				case "?": {
-					required.remove(enchantment);
-					excluded.remove(enchantment);
-					handler.relay(ChatColor.GREEN + "Successfully removed rules relating to enchantment.");
-					break;
-				}
-				default: {
-					throw new InvalidCommandArgument("You entered an invalid instruction.");
-				}
-			}
-			modifier.setRequiredEnchants(required);
-			modifier.setExcludedEnchants(excluded);
-		}
-	}
-
 	// ------------------------------------------------------------
 	// Getters + Setters
 	// ------------------------------------------------------------
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantStorageModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantStorageModifier.java
index 0d717ec1b703cbfa8e927453225f2dfe65a3d6db..4d75eb8becce5bbd160eaf85533c874b7e6f386c 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantStorageModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/EnchantStorageModifier.java
@@ -1,9 +1,7 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.ExchangeRule;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
@@ -22,7 +20,6 @@ import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.MoreClassUtils;
 import vg.civcraft.mc.civmodcore.utilities.MoreMapUtils;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "BOOKCHANTS", order = 201)
 public final class EnchantStorageModifier extends ModifierData {
 
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/LoreModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/LoreModifier.java
index cd9eba37eee064baea9e5a789849b9cd5b20291d..71ef2ae4182abfbb37e3a989e279a017be0594f1 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/LoreModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/LoreModifier.java
@@ -1,32 +1,20 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Optional;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
-import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 import javax.annotation.Nonnull;
 import org.apache.commons.collections4.CollectionUtils;
 import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
-import vg.civcraft.mc.civmodcore.chat.ChatUtils;
 import vg.civcraft.mc.civmodcore.inventory.items.ItemUtils;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.MoreCollectionUtils;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "LORE", order = 300)
 public final class LoreModifier extends ModifierData {
 
@@ -95,38 +83,6 @@ public final class LoreModifier extends ModifierData {
 				"}";
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("ignorelore")
-	@Description("Removes the lore modifier.")
-	public void commandIgnoreLore(Player player) {
-		try (ModifierHandler<LoreModifier> handler = new ModifierHandler<>(player, this)) {
-			handler.setModifier(null);
-			handler.relay(ChatColor.GREEN + "Now ignoring lore.");
-		}
-	}
-
-	@Subcommand("lore")
-	@Description("Sets or resets the item's lore.")
-	@Syntax("[...lore]")
-	public void commandSetLore(Player player, @Optional String value) {
-		try (ModifierHandler<LoreModifier> handler = new ModifierHandler<>(player, this)) {
-			LoreModifier modifier = handler.ensureModifier();
-			if (Strings.isNullOrEmpty(value)) {
-				modifier.setLore(null);
-				handler.relay(ChatColor.GREEN + "Successfully removed lore.");
-			}
-			else {
-				modifier.setLore(Arrays.stream(value.split(";"))
-						.map(ChatUtils::parseColor)
-						.collect(Collectors.toCollection(ArrayList::new)));
-				handler.relay(ChatColor.GREEN + "Successfully changed lore.");
-			}
-		}
-	}
-
 	// ------------------------------------------------------------
 	// Getters + Setters
 	// ------------------------------------------------------------
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/PotionModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/PotionModifier.java
index 4a0e904de7e3b8a82616427c65d5c9d0339fcd01..18a6cebcae0a7a06457fc8d1f0582fbbb0b193bf 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/PotionModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/PotionModifier.java
@@ -1,9 +1,7 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
 import com.untamedears.itemexchange.utility.NBTEncodings;
@@ -25,7 +23,6 @@ import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.MoreClassUtils;
 import vg.civcraft.mc.civmodcore.utilities.NullUtils;
 
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "POTION", order = 400)
 public final class PotionModifier extends ModifierData {
 
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/RepairModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/RepairModifier.java
index ffc5d06e495bf929759d6b75499a3331b39c5001..f9fc67984c80944855f913d47acecf86c4cf8574 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/RepairModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/RepairModifier.java
@@ -1,24 +1,11 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.InvalidCommandArgument;
-import co.aikar.commands.annotation.CommandAlias;
-import co.aikar.commands.annotation.Description;
-import co.aikar.commands.annotation.Optional;
-import co.aikar.commands.annotation.Single;
-import co.aikar.commands.annotation.Subcommand;
-import co.aikar.commands.annotation.Syntax;
-import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
-import com.untamedears.itemexchange.commands.SetCommand;
-import com.untamedears.itemexchange.rules.ExchangeRule;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
 import com.untamedears.itemexchange.rules.interfaces.ModifierData;
-import com.untamedears.itemexchange.utility.ModifierHandler;
 import java.util.List;
 import javax.annotation.Nonnull;
-import org.apache.commons.lang3.StringUtils;
 import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.Repairable;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
@@ -36,7 +23,6 @@ import vg.civcraft.mc.civmodcore.inventory.items.ItemUtils;
  *     <li>Negative integers mean that that repair level or lower, eg: RepairCost &lt;= 15</li>
  * </ul>
  */
-@CommandAlias(SetCommand.ALIAS)
 @Modifier(slug = "REPAIR", order = 600)
 public final class RepairModifier extends ModifierData {
 
@@ -113,50 +99,6 @@ public final class RepairModifier extends ModifierData {
 				"}";
 	}
 
-	// ------------------------------------------------------------
-	// Commands
-	// ------------------------------------------------------------
-
-	@Subcommand("repair|repairlevel")
-	@Description("Sets or resets the exchange's repair level.")
-	@Syntax("[repair level]")
-	public void commandSetRepairLevel(Player player, @Optional @Single String value) {
-		try (ModifierHandler<RepairModifier> handler = new ModifierHandler<>(player, this)) {
-			if (Strings.isNullOrEmpty(value)) {
-				handler.setModifier(null);
-				handler.relay(ChatColor.GREEN + "Successfully removed repair level condition.");
-				return;
-			}
-			RepairModifier modifier = handler.ensureModifier();
-			if (value.startsWith("@")) {
-				int repairLevel = ExchangeRule.ERROR;
-				try {
-					repairLevel = Integer.parseInt(value.substring(1));
-				}
-				catch (final NumberFormatException ignored) { }
-				if (repairLevel < 2) {
-					throw new InvalidCommandArgument("You must enter a valid value, e.g: @9");
-				}
-				modifier.setRepairCost(repairLevel - 2);
-			}
-			else if (StringUtils.equalsIgnoreCase(value, "NEW") || StringUtils.equalsIgnoreCase(value, "MINT")) {
-				modifier.setRepairCost(0);
-			}
-			else {
-				int repairLevel = ExchangeRule.ERROR;
-				try {
-					repairLevel = Integer.parseInt(value);
-				}
-				catch (final NumberFormatException ignored) { }
-				if (repairLevel < 2) {
-					throw new InvalidCommandArgument("You must enter a valid value, e.g: 9");
-				}
-				modifier.setRepairCost((repairLevel - 2) * -1);
-			}
-			handler.relay(ChatColor.GREEN + "Successfully changed repair level condition.");
-		}
-	}
-
 	// ------------------------------------------------------------
 	// Getters + Setters
 	// ------------------------------------------------------------
diff --git a/src/main/java/com/untamedears/itemexchange/rules/modifiers/_ExampleModifier.java b/src/main/java/com/untamedears/itemexchange/rules/modifiers/_ExampleModifier.java
index c2460f959ba7c31e72a0b39df6f84406799d9a07..6b4723502acf338550db31050d40409fd0acedad 100644
--- a/src/main/java/com/untamedears/itemexchange/rules/modifiers/_ExampleModifier.java
+++ b/src/main/java/com/untamedears/itemexchange/rules/modifiers/_ExampleModifier.java
@@ -1,7 +1,5 @@
 package com.untamedears.itemexchange.rules.modifiers;
 
-import co.aikar.commands.annotation.CommandAlias;
-import com.untamedears.itemexchange.commands.SetCommand;
 import com.untamedears.itemexchange.rules.ExchangeRule;
 import com.untamedears.itemexchange.rules.interfaces.ExchangeData;
 import com.untamedears.itemexchange.rules.interfaces.Modifier;
@@ -16,7 +14,6 @@ import vg.civcraft.mc.civmodcore.nbt.NBTSerializationException;
 import vg.civcraft.mc.civmodcore.nbt.wrappers.NBTCompound;
 import vg.civcraft.mc.civmodcore.utilities.Validation;
 
-@CommandAlias(SetCommand.ALIAS) // This is needed to make commands work
 @Modifier(slug = "EXAMPLE", order = 12345)
 public final class _ExampleModifier extends ModifierData {
 
